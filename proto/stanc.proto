syntax = "proto3";

package stan.serve;

// This design follows the 'union types' techniques suggestion from 
// https://developers.google.com/protocol-buffers/docs/techniques
message StanMessage {
  enum Type {
    UNKNOWN = 0;
    EMPTY = 1;
    COMPILE_REQUEST = 2;
    COMPILE_RESPONSE = 3;
    COMPILE_CHECK = 4;
  }
  Type type = 1;
  StanCompileRequest stan_compile_request = 2;
  StanCompileResponse stan_compile_response = 3;
}

// Obvious?
message StanVersion {
  string version = 1;
  string stan_math_hash = 2;
  string stan_stan_hash = 3;
}

// This one is straightforward in the sense that it should just match
// what CmdStan/etc... do. 
message StanCompileRequest {
  string model_name = 1;
  string model_code = 2;
  string model_file_name = 3;
}

// Pretty straight-up stanc, with a state flag:
message StanCompileResponse {
  enum State {
    UNKNOWN = 0;     // deafult in case of bad set value.
    INCOMPLETE = 1;  // compilation is not finished.
    SUCCESS = 2;     // compilation succeeded
    WARN = 3;        // compilation succeeded, check message for issues.
    ERROR = 4;       // compilation failed, check message for errors.
  }
  State state = 2;
  string cpp_code = 3;
  string messages = 4;
//  StanVersion stan_version = 5;  ... not now....
}

service CompileService {
  rpc CompileProgram(StanCompileRequest) returns (StanCompileResponse) {}
}


