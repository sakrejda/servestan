syntax = "proto2";

// This design follows the 'union types' techniques suggestion from 
// https://developers.google.com/protocol-buffers/docs/techniques
message StanMessage {
  enum Type {
    STAN_EMPTY = 0;
    STAN_COMPILE_REQUEST = 1;
    STAN_COMPILE_RESPONSE = 2;
    STAN_COMPILE_CHECK = 3;
  }
  required Type type = 1;
  optional StanCompileRequest stan_compile_request = 2;
  optional StanCompileResponse stan_compile_response = 3;
  optional StanCompileCheck stan_compile_check = 4;
}

// Obvious?
message StanVersion {
  required string version = 1;
  optional string stan_math_hash = 2;
  optional string stan_stan_hash = 3;
}

// This one is straightforward in the sense that it should just match
// what CmdStan/etc... do. 
message StanCompileRequest {
  optional string model_name = 1;
  required string model_code = 2;
  optional string model_file_name = 3;
}

// A client should be able to check with the server if a request has
// been processed.  This should just be based on the hash of the input
// program string.... but maybe more?
message StanCompileCheck {
  required string hash = 1;
  optional StanVersion stan_version = 2;
}


// This is a little more complicated b/c my goals were:
// 1) the client that sent a request should be able to get 
//    a hash in response pretty immediately;
// 2) any client should be able to check on a request by supplying a
//    message with a hash; and 
// 3) any client should be able to retrieve the Stan code that went with
//    a model on the server side.
message StanCompileResponse {
  required string hash = 1;
  enum State {
    COMPILE_INCOMPLETE = 0;  // compilation is not finished.
    COMPILE_SUCCESS = 1;     // compilation succeeded
    COMPILE_WARN = 2;      // compilation succeeded, check message for issues.
    COMPILE_ERROR = 3;       // compilation failed, check message for errors.
  }
  required State state = 2;
  optional string cpp_code = 3;
  optional string messages = 4;
  required StanVersion stan_version = 5;
}

service CompileService {
  rpc CompileProgram(StanCompileRequest) returns (StanCompileResponse) {}
  rpc CompileCheck(StanCompileCheck) returns (StanCompileResponse) {}
}


