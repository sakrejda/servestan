// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: proto/stanc.proto

#include "proto/stanc.pb.h"
#include "proto/stanc.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>

static const char* CompileService_method_names[] = {
  "/CompileService/CompileProgram",
  "/CompileService/CompileCheck",
};

std::unique_ptr< CompileService::Stub> CompileService::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< CompileService::Stub> stub(new CompileService::Stub(channel));
  return stub;
}

CompileService::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_CompileProgram_(CompileService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompileCheck_(CompileService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CompileService::Stub::CompileProgram(::grpc::ClientContext* context, const ::StanCompileRequest& request, ::StanCompileResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CompileProgram_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::StanCompileResponse>* CompileService::Stub::AsyncCompileProgramRaw(::grpc::ClientContext* context, const ::StanCompileRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::StanCompileResponse>(channel_.get(), cq, rpcmethod_CompileProgram_, context, request);
}

::grpc::Status CompileService::Stub::CompileCheck(::grpc::ClientContext* context, const ::StanCompileCheck& request, ::StanCompileResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CompileCheck_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::StanCompileResponse>* CompileService::Stub::AsyncCompileCheckRaw(::grpc::ClientContext* context, const ::StanCompileCheck& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::StanCompileResponse>(channel_.get(), cq, rpcmethod_CompileCheck_, context, request);
}

CompileService::AsyncService::AsyncService() : ::grpc::AsynchronousService(CompileService_method_names, 2) {}

CompileService::Service::Service() {
}

CompileService::Service::~Service() {
}

::grpc::Status CompileService::Service::CompileProgram(::grpc::ServerContext* context, const ::StanCompileRequest* request, ::StanCompileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CompileService::AsyncService::RequestCompileProgram(::grpc::ServerContext* context, ::StanCompileRequest* request, ::grpc::ServerAsyncResponseWriter< ::StanCompileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CompileService::Service::CompileCheck(::grpc::ServerContext* context, const ::StanCompileCheck* request, ::StanCompileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CompileService::AsyncService::RequestCompileCheck(::grpc::ServerContext* context, ::StanCompileCheck* request, ::grpc::ServerAsyncResponseWriter< ::StanCompileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* CompileService::Service::service() {
  if (service_) {
    return service_.get();
  }
  service_ = std::unique_ptr< ::grpc::RpcService>(new ::grpc::RpcService());
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CompileService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CompileService::Service, ::StanCompileRequest, ::StanCompileResponse>(
          std::mem_fn(&CompileService::Service::CompileProgram), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CompileService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CompileService::Service, ::StanCompileCheck, ::StanCompileResponse>(
          std::mem_fn(&CompileService::Service::CompileCheck), this)));
  return service_.get();
}


