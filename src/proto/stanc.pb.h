// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/stanc.proto

#ifndef PROTOBUF_proto_2fstanc_2eproto__INCLUDED
#define PROTOBUF_proto_2fstanc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fstanc_2eproto();
void protobuf_AssignDesc_proto_2fstanc_2eproto();
void protobuf_ShutdownFile_proto_2fstanc_2eproto();

class StanCompileCheck;
class StanCompileRequest;
class StanCompileResponse;
class StanMessage;
class StanVersion;

enum StanMessage_Type {
  StanMessage_Type_STAN_EMPTY = 0,
  StanMessage_Type_STAN_COMPILE_REQUEST = 1,
  StanMessage_Type_STAN_COMPILE_RESPONSE = 2,
  StanMessage_Type_STAN_COMPILE_CHECK = 3
};
bool StanMessage_Type_IsValid(int value);
const StanMessage_Type StanMessage_Type_Type_MIN = StanMessage_Type_STAN_EMPTY;
const StanMessage_Type StanMessage_Type_Type_MAX = StanMessage_Type_STAN_COMPILE_CHECK;
const int StanMessage_Type_Type_ARRAYSIZE = StanMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* StanMessage_Type_descriptor();
inline const ::std::string& StanMessage_Type_Name(StanMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    StanMessage_Type_descriptor(), value);
}
inline bool StanMessage_Type_Parse(
    const ::std::string& name, StanMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StanMessage_Type>(
    StanMessage_Type_descriptor(), name, value);
}
enum StanCompileResponse_State {
  StanCompileResponse_State_COMPILE_INCOMPLETE = 0,
  StanCompileResponse_State_COMPILE_SUCCESS = 1,
  StanCompileResponse_State_COMPILE_WARN = 2,
  StanCompileResponse_State_COMPILE_ERROR = 3
};
bool StanCompileResponse_State_IsValid(int value);
const StanCompileResponse_State StanCompileResponse_State_State_MIN = StanCompileResponse_State_COMPILE_INCOMPLETE;
const StanCompileResponse_State StanCompileResponse_State_State_MAX = StanCompileResponse_State_COMPILE_ERROR;
const int StanCompileResponse_State_State_ARRAYSIZE = StanCompileResponse_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* StanCompileResponse_State_descriptor();
inline const ::std::string& StanCompileResponse_State_Name(StanCompileResponse_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    StanCompileResponse_State_descriptor(), value);
}
inline bool StanCompileResponse_State_Parse(
    const ::std::string& name, StanCompileResponse_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StanCompileResponse_State>(
    StanCompileResponse_State_descriptor(), name, value);
}
// ===================================================================

class StanMessage : public ::google::protobuf::Message {
 public:
  StanMessage();
  virtual ~StanMessage();

  StanMessage(const StanMessage& from);

  inline StanMessage& operator=(const StanMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StanMessage& default_instance();

  void Swap(StanMessage* other);

  // implements Message ----------------------------------------------

  inline StanMessage* New() const { return New(NULL); }

  StanMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StanMessage& from);
  void MergeFrom(const StanMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StanMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StanMessage_Type Type;
  static const Type STAN_EMPTY = StanMessage_Type_STAN_EMPTY;
  static const Type STAN_COMPILE_REQUEST = StanMessage_Type_STAN_COMPILE_REQUEST;
  static const Type STAN_COMPILE_RESPONSE = StanMessage_Type_STAN_COMPILE_RESPONSE;
  static const Type STAN_COMPILE_CHECK = StanMessage_Type_STAN_COMPILE_CHECK;
  static inline bool Type_IsValid(int value) {
    return StanMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    StanMessage_Type_Type_MIN;
  static const Type Type_MAX =
    StanMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    StanMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return StanMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return StanMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return StanMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .StanMessage.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::StanMessage_Type type() const;
  void set_type(::StanMessage_Type value);

  // optional .StanCompileRequest stan_compile_request = 2;
  bool has_stan_compile_request() const;
  void clear_stan_compile_request();
  static const int kStanCompileRequestFieldNumber = 2;
  const ::StanCompileRequest& stan_compile_request() const;
  ::StanCompileRequest* mutable_stan_compile_request();
  ::StanCompileRequest* release_stan_compile_request();
  void set_allocated_stan_compile_request(::StanCompileRequest* stan_compile_request);

  // optional .StanCompileResponse stan_compile_response = 3;
  bool has_stan_compile_response() const;
  void clear_stan_compile_response();
  static const int kStanCompileResponseFieldNumber = 3;
  const ::StanCompileResponse& stan_compile_response() const;
  ::StanCompileResponse* mutable_stan_compile_response();
  ::StanCompileResponse* release_stan_compile_response();
  void set_allocated_stan_compile_response(::StanCompileResponse* stan_compile_response);

  // optional .StanCompileCheck stan_compile_check = 4;
  bool has_stan_compile_check() const;
  void clear_stan_compile_check();
  static const int kStanCompileCheckFieldNumber = 4;
  const ::StanCompileCheck& stan_compile_check() const;
  ::StanCompileCheck* mutable_stan_compile_check();
  ::StanCompileCheck* release_stan_compile_check();
  void set_allocated_stan_compile_check(::StanCompileCheck* stan_compile_check);

  // @@protoc_insertion_point(class_scope:StanMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_stan_compile_request();
  inline void clear_has_stan_compile_request();
  inline void set_has_stan_compile_response();
  inline void clear_has_stan_compile_response();
  inline void set_has_stan_compile_check();
  inline void clear_has_stan_compile_check();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::StanCompileRequest* stan_compile_request_;
  ::StanCompileResponse* stan_compile_response_;
  ::StanCompileCheck* stan_compile_check_;
  int type_;
  friend void  protobuf_AddDesc_proto_2fstanc_2eproto();
  friend void protobuf_AssignDesc_proto_2fstanc_2eproto();
  friend void protobuf_ShutdownFile_proto_2fstanc_2eproto();

  void InitAsDefaultInstance();
  static StanMessage* default_instance_;
};
// -------------------------------------------------------------------

class StanVersion : public ::google::protobuf::Message {
 public:
  StanVersion();
  virtual ~StanVersion();

  StanVersion(const StanVersion& from);

  inline StanVersion& operator=(const StanVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StanVersion& default_instance();

  void Swap(StanVersion* other);

  // implements Message ----------------------------------------------

  inline StanVersion* New() const { return New(NULL); }

  StanVersion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StanVersion& from);
  void MergeFrom(const StanVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StanVersion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string stan_math_hash = 2;
  bool has_stan_math_hash() const;
  void clear_stan_math_hash();
  static const int kStanMathHashFieldNumber = 2;
  const ::std::string& stan_math_hash() const;
  void set_stan_math_hash(const ::std::string& value);
  void set_stan_math_hash(const char* value);
  void set_stan_math_hash(const char* value, size_t size);
  ::std::string* mutable_stan_math_hash();
  ::std::string* release_stan_math_hash();
  void set_allocated_stan_math_hash(::std::string* stan_math_hash);

  // optional string stan_stan_hash = 3;
  bool has_stan_stan_hash() const;
  void clear_stan_stan_hash();
  static const int kStanStanHashFieldNumber = 3;
  const ::std::string& stan_stan_hash() const;
  void set_stan_stan_hash(const ::std::string& value);
  void set_stan_stan_hash(const char* value);
  void set_stan_stan_hash(const char* value, size_t size);
  ::std::string* mutable_stan_stan_hash();
  ::std::string* release_stan_stan_hash();
  void set_allocated_stan_stan_hash(::std::string* stan_stan_hash);

  // @@protoc_insertion_point(class_scope:StanVersion)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_stan_math_hash();
  inline void clear_has_stan_math_hash();
  inline void set_has_stan_stan_hash();
  inline void clear_has_stan_stan_hash();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr stan_math_hash_;
  ::google::protobuf::internal::ArenaStringPtr stan_stan_hash_;
  friend void  protobuf_AddDesc_proto_2fstanc_2eproto();
  friend void protobuf_AssignDesc_proto_2fstanc_2eproto();
  friend void protobuf_ShutdownFile_proto_2fstanc_2eproto();

  void InitAsDefaultInstance();
  static StanVersion* default_instance_;
};
// -------------------------------------------------------------------

class StanCompileRequest : public ::google::protobuf::Message {
 public:
  StanCompileRequest();
  virtual ~StanCompileRequest();

  StanCompileRequest(const StanCompileRequest& from);

  inline StanCompileRequest& operator=(const StanCompileRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StanCompileRequest& default_instance();

  void Swap(StanCompileRequest* other);

  // implements Message ----------------------------------------------

  inline StanCompileRequest* New() const { return New(NULL); }

  StanCompileRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StanCompileRequest& from);
  void MergeFrom(const StanCompileRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StanCompileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string model_name = 1;
  bool has_model_name() const;
  void clear_model_name();
  static const int kModelNameFieldNumber = 1;
  const ::std::string& model_name() const;
  void set_model_name(const ::std::string& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  ::std::string* mutable_model_name();
  ::std::string* release_model_name();
  void set_allocated_model_name(::std::string* model_name);

  // required string model_code = 2;
  bool has_model_code() const;
  void clear_model_code();
  static const int kModelCodeFieldNumber = 2;
  const ::std::string& model_code() const;
  void set_model_code(const ::std::string& value);
  void set_model_code(const char* value);
  void set_model_code(const char* value, size_t size);
  ::std::string* mutable_model_code();
  ::std::string* release_model_code();
  void set_allocated_model_code(::std::string* model_code);

  // optional string model_file_name = 3;
  bool has_model_file_name() const;
  void clear_model_file_name();
  static const int kModelFileNameFieldNumber = 3;
  const ::std::string& model_file_name() const;
  void set_model_file_name(const ::std::string& value);
  void set_model_file_name(const char* value);
  void set_model_file_name(const char* value, size_t size);
  ::std::string* mutable_model_file_name();
  ::std::string* release_model_file_name();
  void set_allocated_model_file_name(::std::string* model_file_name);

  // @@protoc_insertion_point(class_scope:StanCompileRequest)
 private:
  inline void set_has_model_name();
  inline void clear_has_model_name();
  inline void set_has_model_code();
  inline void clear_has_model_code();
  inline void set_has_model_file_name();
  inline void clear_has_model_file_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr model_name_;
  ::google::protobuf::internal::ArenaStringPtr model_code_;
  ::google::protobuf::internal::ArenaStringPtr model_file_name_;
  friend void  protobuf_AddDesc_proto_2fstanc_2eproto();
  friend void protobuf_AssignDesc_proto_2fstanc_2eproto();
  friend void protobuf_ShutdownFile_proto_2fstanc_2eproto();

  void InitAsDefaultInstance();
  static StanCompileRequest* default_instance_;
};
// -------------------------------------------------------------------

class StanCompileCheck : public ::google::protobuf::Message {
 public:
  StanCompileCheck();
  virtual ~StanCompileCheck();

  StanCompileCheck(const StanCompileCheck& from);

  inline StanCompileCheck& operator=(const StanCompileCheck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StanCompileCheck& default_instance();

  void Swap(StanCompileCheck* other);

  // implements Message ----------------------------------------------

  inline StanCompileCheck* New() const { return New(NULL); }

  StanCompileCheck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StanCompileCheck& from);
  void MergeFrom(const StanCompileCheck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StanCompileCheck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string hash = 1;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // optional .StanVersion stan_version = 2;
  bool has_stan_version() const;
  void clear_stan_version();
  static const int kStanVersionFieldNumber = 2;
  const ::StanVersion& stan_version() const;
  ::StanVersion* mutable_stan_version();
  ::StanVersion* release_stan_version();
  void set_allocated_stan_version(::StanVersion* stan_version);

  // @@protoc_insertion_point(class_scope:StanCompileCheck)
 private:
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_stan_version();
  inline void clear_has_stan_version();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::StanVersion* stan_version_;
  friend void  protobuf_AddDesc_proto_2fstanc_2eproto();
  friend void protobuf_AssignDesc_proto_2fstanc_2eproto();
  friend void protobuf_ShutdownFile_proto_2fstanc_2eproto();

  void InitAsDefaultInstance();
  static StanCompileCheck* default_instance_;
};
// -------------------------------------------------------------------

class StanCompileResponse : public ::google::protobuf::Message {
 public:
  StanCompileResponse();
  virtual ~StanCompileResponse();

  StanCompileResponse(const StanCompileResponse& from);

  inline StanCompileResponse& operator=(const StanCompileResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StanCompileResponse& default_instance();

  void Swap(StanCompileResponse* other);

  // implements Message ----------------------------------------------

  inline StanCompileResponse* New() const { return New(NULL); }

  StanCompileResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StanCompileResponse& from);
  void MergeFrom(const StanCompileResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StanCompileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StanCompileResponse_State State;
  static const State COMPILE_INCOMPLETE = StanCompileResponse_State_COMPILE_INCOMPLETE;
  static const State COMPILE_SUCCESS = StanCompileResponse_State_COMPILE_SUCCESS;
  static const State COMPILE_WARN = StanCompileResponse_State_COMPILE_WARN;
  static const State COMPILE_ERROR = StanCompileResponse_State_COMPILE_ERROR;
  static inline bool State_IsValid(int value) {
    return StanCompileResponse_State_IsValid(value);
  }
  static const State State_MIN =
    StanCompileResponse_State_State_MIN;
  static const State State_MAX =
    StanCompileResponse_State_State_MAX;
  static const int State_ARRAYSIZE =
    StanCompileResponse_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return StanCompileResponse_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return StanCompileResponse_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return StanCompileResponse_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string hash = 1;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // required .StanCompileResponse.State state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::StanCompileResponse_State state() const;
  void set_state(::StanCompileResponse_State value);

  // optional string cpp_code = 3;
  bool has_cpp_code() const;
  void clear_cpp_code();
  static const int kCppCodeFieldNumber = 3;
  const ::std::string& cpp_code() const;
  void set_cpp_code(const ::std::string& value);
  void set_cpp_code(const char* value);
  void set_cpp_code(const char* value, size_t size);
  ::std::string* mutable_cpp_code();
  ::std::string* release_cpp_code();
  void set_allocated_cpp_code(::std::string* cpp_code);

  // optional string messages = 4;
  bool has_messages() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 4;
  const ::std::string& messages() const;
  void set_messages(const ::std::string& value);
  void set_messages(const char* value);
  void set_messages(const char* value, size_t size);
  ::std::string* mutable_messages();
  ::std::string* release_messages();
  void set_allocated_messages(::std::string* messages);

  // required .StanVersion stan_version = 5;
  bool has_stan_version() const;
  void clear_stan_version();
  static const int kStanVersionFieldNumber = 5;
  const ::StanVersion& stan_version() const;
  ::StanVersion* mutable_stan_version();
  ::StanVersion* release_stan_version();
  void set_allocated_stan_version(::StanVersion* stan_version);

  // @@protoc_insertion_point(class_scope:StanCompileResponse)
 private:
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cpp_code();
  inline void clear_has_cpp_code();
  inline void set_has_messages();
  inline void clear_has_messages();
  inline void set_has_stan_version();
  inline void clear_has_stan_version();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr cpp_code_;
  ::google::protobuf::internal::ArenaStringPtr messages_;
  ::StanVersion* stan_version_;
  int state_;
  friend void  protobuf_AddDesc_proto_2fstanc_2eproto();
  friend void protobuf_AssignDesc_proto_2fstanc_2eproto();
  friend void protobuf_ShutdownFile_proto_2fstanc_2eproto();

  void InitAsDefaultInstance();
  static StanCompileResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StanMessage

// required .StanMessage.Type type = 1;
inline bool StanMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StanMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StanMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StanMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::StanMessage_Type StanMessage::type() const {
  // @@protoc_insertion_point(field_get:StanMessage.type)
  return static_cast< ::StanMessage_Type >(type_);
}
inline void StanMessage::set_type(::StanMessage_Type value) {
  assert(::StanMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:StanMessage.type)
}

// optional .StanCompileRequest stan_compile_request = 2;
inline bool StanMessage::has_stan_compile_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StanMessage::set_has_stan_compile_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StanMessage::clear_has_stan_compile_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StanMessage::clear_stan_compile_request() {
  if (stan_compile_request_ != NULL) stan_compile_request_->::StanCompileRequest::Clear();
  clear_has_stan_compile_request();
}
inline const ::StanCompileRequest& StanMessage::stan_compile_request() const {
  // @@protoc_insertion_point(field_get:StanMessage.stan_compile_request)
  return stan_compile_request_ != NULL ? *stan_compile_request_ : *default_instance_->stan_compile_request_;
}
inline ::StanCompileRequest* StanMessage::mutable_stan_compile_request() {
  set_has_stan_compile_request();
  if (stan_compile_request_ == NULL) {
    stan_compile_request_ = new ::StanCompileRequest;
  }
  // @@protoc_insertion_point(field_mutable:StanMessage.stan_compile_request)
  return stan_compile_request_;
}
inline ::StanCompileRequest* StanMessage::release_stan_compile_request() {
  clear_has_stan_compile_request();
  ::StanCompileRequest* temp = stan_compile_request_;
  stan_compile_request_ = NULL;
  return temp;
}
inline void StanMessage::set_allocated_stan_compile_request(::StanCompileRequest* stan_compile_request) {
  delete stan_compile_request_;
  stan_compile_request_ = stan_compile_request;
  if (stan_compile_request) {
    set_has_stan_compile_request();
  } else {
    clear_has_stan_compile_request();
  }
  // @@protoc_insertion_point(field_set_allocated:StanMessage.stan_compile_request)
}

// optional .StanCompileResponse stan_compile_response = 3;
inline bool StanMessage::has_stan_compile_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StanMessage::set_has_stan_compile_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StanMessage::clear_has_stan_compile_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StanMessage::clear_stan_compile_response() {
  if (stan_compile_response_ != NULL) stan_compile_response_->::StanCompileResponse::Clear();
  clear_has_stan_compile_response();
}
inline const ::StanCompileResponse& StanMessage::stan_compile_response() const {
  // @@protoc_insertion_point(field_get:StanMessage.stan_compile_response)
  return stan_compile_response_ != NULL ? *stan_compile_response_ : *default_instance_->stan_compile_response_;
}
inline ::StanCompileResponse* StanMessage::mutable_stan_compile_response() {
  set_has_stan_compile_response();
  if (stan_compile_response_ == NULL) {
    stan_compile_response_ = new ::StanCompileResponse;
  }
  // @@protoc_insertion_point(field_mutable:StanMessage.stan_compile_response)
  return stan_compile_response_;
}
inline ::StanCompileResponse* StanMessage::release_stan_compile_response() {
  clear_has_stan_compile_response();
  ::StanCompileResponse* temp = stan_compile_response_;
  stan_compile_response_ = NULL;
  return temp;
}
inline void StanMessage::set_allocated_stan_compile_response(::StanCompileResponse* stan_compile_response) {
  delete stan_compile_response_;
  stan_compile_response_ = stan_compile_response;
  if (stan_compile_response) {
    set_has_stan_compile_response();
  } else {
    clear_has_stan_compile_response();
  }
  // @@protoc_insertion_point(field_set_allocated:StanMessage.stan_compile_response)
}

// optional .StanCompileCheck stan_compile_check = 4;
inline bool StanMessage::has_stan_compile_check() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StanMessage::set_has_stan_compile_check() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StanMessage::clear_has_stan_compile_check() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StanMessage::clear_stan_compile_check() {
  if (stan_compile_check_ != NULL) stan_compile_check_->::StanCompileCheck::Clear();
  clear_has_stan_compile_check();
}
inline const ::StanCompileCheck& StanMessage::stan_compile_check() const {
  // @@protoc_insertion_point(field_get:StanMessage.stan_compile_check)
  return stan_compile_check_ != NULL ? *stan_compile_check_ : *default_instance_->stan_compile_check_;
}
inline ::StanCompileCheck* StanMessage::mutable_stan_compile_check() {
  set_has_stan_compile_check();
  if (stan_compile_check_ == NULL) {
    stan_compile_check_ = new ::StanCompileCheck;
  }
  // @@protoc_insertion_point(field_mutable:StanMessage.stan_compile_check)
  return stan_compile_check_;
}
inline ::StanCompileCheck* StanMessage::release_stan_compile_check() {
  clear_has_stan_compile_check();
  ::StanCompileCheck* temp = stan_compile_check_;
  stan_compile_check_ = NULL;
  return temp;
}
inline void StanMessage::set_allocated_stan_compile_check(::StanCompileCheck* stan_compile_check) {
  delete stan_compile_check_;
  stan_compile_check_ = stan_compile_check;
  if (stan_compile_check) {
    set_has_stan_compile_check();
  } else {
    clear_has_stan_compile_check();
  }
  // @@protoc_insertion_point(field_set_allocated:StanMessage.stan_compile_check)
}

// -------------------------------------------------------------------

// StanVersion

// required string version = 1;
inline bool StanVersion::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StanVersion::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StanVersion::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StanVersion::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& StanVersion::version() const {
  // @@protoc_insertion_point(field_get:StanVersion.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanVersion::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanVersion.version)
}
inline void StanVersion::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanVersion.version)
}
inline void StanVersion::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanVersion.version)
}
inline ::std::string* StanVersion::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:StanVersion.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StanVersion::release_version() {
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanVersion::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:StanVersion.version)
}

// optional string stan_math_hash = 2;
inline bool StanVersion::has_stan_math_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StanVersion::set_has_stan_math_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StanVersion::clear_has_stan_math_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StanVersion::clear_stan_math_hash() {
  stan_math_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stan_math_hash();
}
inline const ::std::string& StanVersion::stan_math_hash() const {
  // @@protoc_insertion_point(field_get:StanVersion.stan_math_hash)
  return stan_math_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanVersion::set_stan_math_hash(const ::std::string& value) {
  set_has_stan_math_hash();
  stan_math_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanVersion.stan_math_hash)
}
inline void StanVersion::set_stan_math_hash(const char* value) {
  set_has_stan_math_hash();
  stan_math_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanVersion.stan_math_hash)
}
inline void StanVersion::set_stan_math_hash(const char* value, size_t size) {
  set_has_stan_math_hash();
  stan_math_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanVersion.stan_math_hash)
}
inline ::std::string* StanVersion::mutable_stan_math_hash() {
  set_has_stan_math_hash();
  // @@protoc_insertion_point(field_mutable:StanVersion.stan_math_hash)
  return stan_math_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StanVersion::release_stan_math_hash() {
  clear_has_stan_math_hash();
  return stan_math_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanVersion::set_allocated_stan_math_hash(::std::string* stan_math_hash) {
  if (stan_math_hash != NULL) {
    set_has_stan_math_hash();
  } else {
    clear_has_stan_math_hash();
  }
  stan_math_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stan_math_hash);
  // @@protoc_insertion_point(field_set_allocated:StanVersion.stan_math_hash)
}

// optional string stan_stan_hash = 3;
inline bool StanVersion::has_stan_stan_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StanVersion::set_has_stan_stan_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StanVersion::clear_has_stan_stan_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StanVersion::clear_stan_stan_hash() {
  stan_stan_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stan_stan_hash();
}
inline const ::std::string& StanVersion::stan_stan_hash() const {
  // @@protoc_insertion_point(field_get:StanVersion.stan_stan_hash)
  return stan_stan_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanVersion::set_stan_stan_hash(const ::std::string& value) {
  set_has_stan_stan_hash();
  stan_stan_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanVersion.stan_stan_hash)
}
inline void StanVersion::set_stan_stan_hash(const char* value) {
  set_has_stan_stan_hash();
  stan_stan_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanVersion.stan_stan_hash)
}
inline void StanVersion::set_stan_stan_hash(const char* value, size_t size) {
  set_has_stan_stan_hash();
  stan_stan_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanVersion.stan_stan_hash)
}
inline ::std::string* StanVersion::mutable_stan_stan_hash() {
  set_has_stan_stan_hash();
  // @@protoc_insertion_point(field_mutable:StanVersion.stan_stan_hash)
  return stan_stan_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StanVersion::release_stan_stan_hash() {
  clear_has_stan_stan_hash();
  return stan_stan_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanVersion::set_allocated_stan_stan_hash(::std::string* stan_stan_hash) {
  if (stan_stan_hash != NULL) {
    set_has_stan_stan_hash();
  } else {
    clear_has_stan_stan_hash();
  }
  stan_stan_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stan_stan_hash);
  // @@protoc_insertion_point(field_set_allocated:StanVersion.stan_stan_hash)
}

// -------------------------------------------------------------------

// StanCompileRequest

// optional string model_name = 1;
inline bool StanCompileRequest::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StanCompileRequest::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StanCompileRequest::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StanCompileRequest::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
inline const ::std::string& StanCompileRequest::model_name() const {
  // @@protoc_insertion_point(field_get:StanCompileRequest.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileRequest::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileRequest.model_name)
}
inline void StanCompileRequest::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileRequest.model_name)
}
inline void StanCompileRequest::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileRequest.model_name)
}
inline ::std::string* StanCompileRequest::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:StanCompileRequest.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StanCompileRequest::release_model_name() {
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileRequest::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:StanCompileRequest.model_name)
}

// required string model_code = 2;
inline bool StanCompileRequest::has_model_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StanCompileRequest::set_has_model_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StanCompileRequest::clear_has_model_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StanCompileRequest::clear_model_code() {
  model_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_code();
}
inline const ::std::string& StanCompileRequest::model_code() const {
  // @@protoc_insertion_point(field_get:StanCompileRequest.model_code)
  return model_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileRequest::set_model_code(const ::std::string& value) {
  set_has_model_code();
  model_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileRequest.model_code)
}
inline void StanCompileRequest::set_model_code(const char* value) {
  set_has_model_code();
  model_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileRequest.model_code)
}
inline void StanCompileRequest::set_model_code(const char* value, size_t size) {
  set_has_model_code();
  model_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileRequest.model_code)
}
inline ::std::string* StanCompileRequest::mutable_model_code() {
  set_has_model_code();
  // @@protoc_insertion_point(field_mutable:StanCompileRequest.model_code)
  return model_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StanCompileRequest::release_model_code() {
  clear_has_model_code();
  return model_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileRequest::set_allocated_model_code(::std::string* model_code) {
  if (model_code != NULL) {
    set_has_model_code();
  } else {
    clear_has_model_code();
  }
  model_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_code);
  // @@protoc_insertion_point(field_set_allocated:StanCompileRequest.model_code)
}

// optional string model_file_name = 3;
inline bool StanCompileRequest::has_model_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StanCompileRequest::set_has_model_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StanCompileRequest::clear_has_model_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StanCompileRequest::clear_model_file_name() {
  model_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_file_name();
}
inline const ::std::string& StanCompileRequest::model_file_name() const {
  // @@protoc_insertion_point(field_get:StanCompileRequest.model_file_name)
  return model_file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileRequest::set_model_file_name(const ::std::string& value) {
  set_has_model_file_name();
  model_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileRequest.model_file_name)
}
inline void StanCompileRequest::set_model_file_name(const char* value) {
  set_has_model_file_name();
  model_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileRequest.model_file_name)
}
inline void StanCompileRequest::set_model_file_name(const char* value, size_t size) {
  set_has_model_file_name();
  model_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileRequest.model_file_name)
}
inline ::std::string* StanCompileRequest::mutable_model_file_name() {
  set_has_model_file_name();
  // @@protoc_insertion_point(field_mutable:StanCompileRequest.model_file_name)
  return model_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StanCompileRequest::release_model_file_name() {
  clear_has_model_file_name();
  return model_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileRequest::set_allocated_model_file_name(::std::string* model_file_name) {
  if (model_file_name != NULL) {
    set_has_model_file_name();
  } else {
    clear_has_model_file_name();
  }
  model_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_file_name);
  // @@protoc_insertion_point(field_set_allocated:StanCompileRequest.model_file_name)
}

// -------------------------------------------------------------------

// StanCompileCheck

// required string hash = 1;
inline bool StanCompileCheck::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StanCompileCheck::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StanCompileCheck::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StanCompileCheck::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& StanCompileCheck::hash() const {
  // @@protoc_insertion_point(field_get:StanCompileCheck.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileCheck::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileCheck.hash)
}
inline void StanCompileCheck::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileCheck.hash)
}
inline void StanCompileCheck::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileCheck.hash)
}
inline ::std::string* StanCompileCheck::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:StanCompileCheck.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StanCompileCheck::release_hash() {
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileCheck::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:StanCompileCheck.hash)
}

// optional .StanVersion stan_version = 2;
inline bool StanCompileCheck::has_stan_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StanCompileCheck::set_has_stan_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StanCompileCheck::clear_has_stan_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StanCompileCheck::clear_stan_version() {
  if (stan_version_ != NULL) stan_version_->::StanVersion::Clear();
  clear_has_stan_version();
}
inline const ::StanVersion& StanCompileCheck::stan_version() const {
  // @@protoc_insertion_point(field_get:StanCompileCheck.stan_version)
  return stan_version_ != NULL ? *stan_version_ : *default_instance_->stan_version_;
}
inline ::StanVersion* StanCompileCheck::mutable_stan_version() {
  set_has_stan_version();
  if (stan_version_ == NULL) {
    stan_version_ = new ::StanVersion;
  }
  // @@protoc_insertion_point(field_mutable:StanCompileCheck.stan_version)
  return stan_version_;
}
inline ::StanVersion* StanCompileCheck::release_stan_version() {
  clear_has_stan_version();
  ::StanVersion* temp = stan_version_;
  stan_version_ = NULL;
  return temp;
}
inline void StanCompileCheck::set_allocated_stan_version(::StanVersion* stan_version) {
  delete stan_version_;
  stan_version_ = stan_version;
  if (stan_version) {
    set_has_stan_version();
  } else {
    clear_has_stan_version();
  }
  // @@protoc_insertion_point(field_set_allocated:StanCompileCheck.stan_version)
}

// -------------------------------------------------------------------

// StanCompileResponse

// required string hash = 1;
inline bool StanCompileResponse::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StanCompileResponse::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StanCompileResponse::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StanCompileResponse::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
inline const ::std::string& StanCompileResponse::hash() const {
  // @@protoc_insertion_point(field_get:StanCompileResponse.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileResponse::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileResponse.hash)
}
inline void StanCompileResponse::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileResponse.hash)
}
inline void StanCompileResponse::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileResponse.hash)
}
inline ::std::string* StanCompileResponse::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:StanCompileResponse.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StanCompileResponse::release_hash() {
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileResponse::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:StanCompileResponse.hash)
}

// required .StanCompileResponse.State state = 2;
inline bool StanCompileResponse::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StanCompileResponse::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StanCompileResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StanCompileResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::StanCompileResponse_State StanCompileResponse::state() const {
  // @@protoc_insertion_point(field_get:StanCompileResponse.state)
  return static_cast< ::StanCompileResponse_State >(state_);
}
inline void StanCompileResponse::set_state(::StanCompileResponse_State value) {
  assert(::StanCompileResponse_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:StanCompileResponse.state)
}

// optional string cpp_code = 3;
inline bool StanCompileResponse::has_cpp_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StanCompileResponse::set_has_cpp_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StanCompileResponse::clear_has_cpp_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StanCompileResponse::clear_cpp_code() {
  cpp_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpp_code();
}
inline const ::std::string& StanCompileResponse::cpp_code() const {
  // @@protoc_insertion_point(field_get:StanCompileResponse.cpp_code)
  return cpp_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileResponse::set_cpp_code(const ::std::string& value) {
  set_has_cpp_code();
  cpp_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileResponse.cpp_code)
}
inline void StanCompileResponse::set_cpp_code(const char* value) {
  set_has_cpp_code();
  cpp_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileResponse.cpp_code)
}
inline void StanCompileResponse::set_cpp_code(const char* value, size_t size) {
  set_has_cpp_code();
  cpp_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileResponse.cpp_code)
}
inline ::std::string* StanCompileResponse::mutable_cpp_code() {
  set_has_cpp_code();
  // @@protoc_insertion_point(field_mutable:StanCompileResponse.cpp_code)
  return cpp_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StanCompileResponse::release_cpp_code() {
  clear_has_cpp_code();
  return cpp_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileResponse::set_allocated_cpp_code(::std::string* cpp_code) {
  if (cpp_code != NULL) {
    set_has_cpp_code();
  } else {
    clear_has_cpp_code();
  }
  cpp_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpp_code);
  // @@protoc_insertion_point(field_set_allocated:StanCompileResponse.cpp_code)
}

// optional string messages = 4;
inline bool StanCompileResponse::has_messages() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StanCompileResponse::set_has_messages() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StanCompileResponse::clear_has_messages() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StanCompileResponse::clear_messages() {
  messages_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messages();
}
inline const ::std::string& StanCompileResponse::messages() const {
  // @@protoc_insertion_point(field_get:StanCompileResponse.messages)
  return messages_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileResponse::set_messages(const ::std::string& value) {
  set_has_messages();
  messages_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileResponse.messages)
}
inline void StanCompileResponse::set_messages(const char* value) {
  set_has_messages();
  messages_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileResponse.messages)
}
inline void StanCompileResponse::set_messages(const char* value, size_t size) {
  set_has_messages();
  messages_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileResponse.messages)
}
inline ::std::string* StanCompileResponse::mutable_messages() {
  set_has_messages();
  // @@protoc_insertion_point(field_mutable:StanCompileResponse.messages)
  return messages_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StanCompileResponse::release_messages() {
  clear_has_messages();
  return messages_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StanCompileResponse::set_allocated_messages(::std::string* messages) {
  if (messages != NULL) {
    set_has_messages();
  } else {
    clear_has_messages();
  }
  messages_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messages);
  // @@protoc_insertion_point(field_set_allocated:StanCompileResponse.messages)
}

// required .StanVersion stan_version = 5;
inline bool StanCompileResponse::has_stan_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StanCompileResponse::set_has_stan_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StanCompileResponse::clear_has_stan_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StanCompileResponse::clear_stan_version() {
  if (stan_version_ != NULL) stan_version_->::StanVersion::Clear();
  clear_has_stan_version();
}
inline const ::StanVersion& StanCompileResponse::stan_version() const {
  // @@protoc_insertion_point(field_get:StanCompileResponse.stan_version)
  return stan_version_ != NULL ? *stan_version_ : *default_instance_->stan_version_;
}
inline ::StanVersion* StanCompileResponse::mutable_stan_version() {
  set_has_stan_version();
  if (stan_version_ == NULL) {
    stan_version_ = new ::StanVersion;
  }
  // @@protoc_insertion_point(field_mutable:StanCompileResponse.stan_version)
  return stan_version_;
}
inline ::StanVersion* StanCompileResponse::release_stan_version() {
  clear_has_stan_version();
  ::StanVersion* temp = stan_version_;
  stan_version_ = NULL;
  return temp;
}
inline void StanCompileResponse::set_allocated_stan_version(::StanVersion* stan_version) {
  delete stan_version_;
  stan_version_ = stan_version;
  if (stan_version) {
    set_has_stan_version();
  } else {
    clear_has_stan_version();
  }
  // @@protoc_insertion_point(field_set_allocated:StanCompileResponse.stan_version)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::StanMessage_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StanMessage_Type>() {
  return ::StanMessage_Type_descriptor();
}
template <> struct is_proto_enum< ::StanCompileResponse_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StanCompileResponse_State>() {
  return ::StanCompileResponse_State_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fstanc_2eproto__INCLUDED
