// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/stanc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/stanc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stan {
namespace serve {

namespace {

const ::google::protobuf::Descriptor* StanMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StanMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StanMessage_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StanVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StanVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* StanCompileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StanCompileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StanCompileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StanCompileResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StanCompileResponse_State_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fstanc_2eproto() {
  protobuf_AddDesc_proto_2fstanc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/stanc.proto");
  GOOGLE_CHECK(file != NULL);
  StanMessage_descriptor_ = file->message_type(0);
  static const int StanMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, stan_compile_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, stan_compile_response_),
  };
  StanMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StanMessage_descriptor_,
      StanMessage::default_instance_,
      StanMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(StanMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, _is_default_instance_));
  StanMessage_Type_descriptor_ = StanMessage_descriptor_->enum_type(0);
  StanVersion_descriptor_ = file->message_type(1);
  static const int StanVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanVersion, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanVersion, stan_math_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanVersion, stan_stan_hash_),
  };
  StanVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StanVersion_descriptor_,
      StanVersion::default_instance_,
      StanVersion_offsets_,
      -1,
      -1,
      -1,
      sizeof(StanVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanVersion, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanVersion, _is_default_instance_));
  StanCompileRequest_descriptor_ = file->message_type(2);
  static const int StanCompileRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileRequest, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileRequest, model_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileRequest, model_file_name_),
  };
  StanCompileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StanCompileRequest_descriptor_,
      StanCompileRequest::default_instance_,
      StanCompileRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(StanCompileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileRequest, _is_default_instance_));
  StanCompileResponse_descriptor_ = file->message_type(3);
  static const int StanCompileResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, cpp_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, messages_),
  };
  StanCompileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StanCompileResponse_descriptor_,
      StanCompileResponse::default_instance_,
      StanCompileResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(StanCompileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, _is_default_instance_));
  StanCompileResponse_State_descriptor_ = StanCompileResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fstanc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StanMessage_descriptor_, &StanMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StanVersion_descriptor_, &StanVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StanCompileRequest_descriptor_, &StanCompileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StanCompileResponse_descriptor_, &StanCompileResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fstanc_2eproto() {
  delete StanMessage::default_instance_;
  delete StanMessage_reflection_;
  delete StanVersion::default_instance_;
  delete StanVersion_reflection_;
  delete StanCompileRequest::default_instance_;
  delete StanCompileRequest_reflection_;
  delete StanCompileResponse::default_instance_;
  delete StanCompileResponse_reflection_;
}

void protobuf_AddDesc_proto_2fstanc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021proto/stanc.proto\022\nstan.serve\"\225\002\n\013Stan"
    "Message\022*\n\004type\030\001 \001(\0162\034.stan.serve.StanM"
    "essage.Type\022<\n\024stan_compile_request\030\002 \001("
    "\0132\036.stan.serve.StanCompileRequest\022>\n\025sta"
    "n_compile_response\030\003 \001(\0132\037.stan.serve.St"
    "anCompileResponse\"\\\n\004Type\022\013\n\007UNKNOWN\020\000\022\t"
    "\n\005EMPTY\020\001\022\023\n\017COMPILE_REQUEST\020\002\022\024\n\020COMPIL"
    "E_RESPONSE\020\003\022\021\n\rCOMPILE_CHECK\020\004\"N\n\013StanV"
    "ersion\022\017\n\007version\030\001 \001(\t\022\026\n\016stan_math_has"
    "h\030\002 \001(\t\022\026\n\016stan_stan_hash\030\003 \001(\t\"U\n\022StanC"
    "ompileRequest\022\022\n\nmodel_name\030\001 \001(\t\022\022\n\nmod"
    "el_code\030\002 \001(\t\022\027\n\017model_file_name\030\003 \001(\t\"\267"
    "\001\n\023StanCompileResponse\0224\n\005state\030\002 \001(\0162%."
    "stan.serve.StanCompileResponse.State\022\020\n\010"
    "cpp_code\030\003 \001(\t\022\020\n\010messages\030\004 \001(\t\"F\n\005Stat"
    "e\022\013\n\007UNKNOWN\020\000\022\016\n\nINCOMPLETE\020\001\022\013\n\007SUCCES"
    "S\020\002\022\010\n\004WARN\020\003\022\t\n\005ERROR\020\0042e\n\016CompileServi"
    "ce\022S\n\016CompileProgram\022\036.stan.serve.StanCo"
    "mpileRequest\032\037.stan.serve.StanCompileRes"
    "ponse\"\000b\006proto3", 775);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/stanc.proto", &protobuf_RegisterTypes);
  StanMessage::default_instance_ = new StanMessage();
  StanVersion::default_instance_ = new StanVersion();
  StanCompileRequest::default_instance_ = new StanCompileRequest();
  StanCompileResponse::default_instance_ = new StanCompileResponse();
  StanMessage::default_instance_->InitAsDefaultInstance();
  StanVersion::default_instance_->InitAsDefaultInstance();
  StanCompileRequest::default_instance_->InitAsDefaultInstance();
  StanCompileResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fstanc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fstanc_2eproto {
  StaticDescriptorInitializer_proto_2fstanc_2eproto() {
    protobuf_AddDesc_proto_2fstanc_2eproto();
  }
} static_descriptor_initializer_proto_2fstanc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* StanMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanMessage_Type_descriptor_;
}
bool StanMessage_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StanMessage_Type StanMessage::UNKNOWN;
const StanMessage_Type StanMessage::EMPTY;
const StanMessage_Type StanMessage::COMPILE_REQUEST;
const StanMessage_Type StanMessage::COMPILE_RESPONSE;
const StanMessage_Type StanMessage::COMPILE_CHECK;
const StanMessage_Type StanMessage::Type_MIN;
const StanMessage_Type StanMessage::Type_MAX;
const int StanMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StanMessage::kTypeFieldNumber;
const int StanMessage::kStanCompileRequestFieldNumber;
const int StanMessage::kStanCompileResponseFieldNumber;
#endif  // !_MSC_VER

StanMessage::StanMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stan.serve.StanMessage)
}

void StanMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  stan_compile_request_ = const_cast< ::stan::serve::StanCompileRequest*>(&::stan::serve::StanCompileRequest::default_instance());
  stan_compile_response_ = const_cast< ::stan::serve::StanCompileResponse*>(&::stan::serve::StanCompileResponse::default_instance());
}

StanMessage::StanMessage(const StanMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stan.serve.StanMessage)
}

void StanMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0;
  stan_compile_request_ = NULL;
  stan_compile_response_ = NULL;
}

StanMessage::~StanMessage() {
  // @@protoc_insertion_point(destructor:stan.serve.StanMessage)
  SharedDtor();
}

void StanMessage::SharedDtor() {
  if (this != default_instance_) {
    delete stan_compile_request_;
    delete stan_compile_response_;
  }
}

void StanMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StanMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanMessage_descriptor_;
}

const StanMessage& StanMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fstanc_2eproto();
  return *default_instance_;
}

StanMessage* StanMessage::default_instance_ = NULL;

StanMessage* StanMessage::New(::google::protobuf::Arena* arena) const {
  StanMessage* n = new StanMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StanMessage::Clear() {
  type_ = 0;
  if (GetArenaNoVirtual() == NULL && stan_compile_request_ != NULL) delete stan_compile_request_;
  stan_compile_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && stan_compile_response_ != NULL) delete stan_compile_response_;
  stan_compile_response_ = NULL;
}

bool StanMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stan.serve.StanMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .stan.serve.StanMessage.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::stan::serve::StanMessage_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stan_compile_request;
        break;
      }

      // optional .stan.serve.StanCompileRequest stan_compile_request = 2;
      case 2: {
        if (tag == 18) {
         parse_stan_compile_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stan_compile_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stan_compile_response;
        break;
      }

      // optional .stan.serve.StanCompileResponse stan_compile_response = 3;
      case 3: {
        if (tag == 26) {
         parse_stan_compile_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stan_compile_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stan.serve.StanMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stan.serve.StanMessage)
  return false;
#undef DO_
}

void StanMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stan.serve.StanMessage)
  // optional .stan.serve.StanMessage.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .stan.serve.StanCompileRequest stan_compile_request = 2;
  if (this->has_stan_compile_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stan_compile_request_, output);
  }

  // optional .stan.serve.StanCompileResponse stan_compile_response = 3;
  if (this->has_stan_compile_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stan_compile_response_, output);
  }

  // @@protoc_insertion_point(serialize_end:stan.serve.StanMessage)
}

::google::protobuf::uint8* StanMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stan.serve.StanMessage)
  // optional .stan.serve.StanMessage.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .stan.serve.StanCompileRequest stan_compile_request = 2;
  if (this->has_stan_compile_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->stan_compile_request_, target);
  }

  // optional .stan.serve.StanCompileResponse stan_compile_response = 3;
  if (this->has_stan_compile_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->stan_compile_response_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:stan.serve.StanMessage)
  return target;
}

int StanMessage::ByteSize() const {
  int total_size = 0;

  // optional .stan.serve.StanMessage.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional .stan.serve.StanCompileRequest stan_compile_request = 2;
  if (this->has_stan_compile_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stan_compile_request_);
  }

  // optional .stan.serve.StanCompileResponse stan_compile_response = 3;
  if (this->has_stan_compile_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stan_compile_response_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StanMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StanMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StanMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StanMessage::MergeFrom(const StanMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_stan_compile_request()) {
    mutable_stan_compile_request()->::stan::serve::StanCompileRequest::MergeFrom(from.stan_compile_request());
  }
  if (from.has_stan_compile_response()) {
    mutable_stan_compile_response()->::stan::serve::StanCompileResponse::MergeFrom(from.stan_compile_response());
  }
}

void StanMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StanMessage::CopyFrom(const StanMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StanMessage::IsInitialized() const {

  return true;
}

void StanMessage::Swap(StanMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StanMessage::InternalSwap(StanMessage* other) {
  std::swap(type_, other->type_);
  std::swap(stan_compile_request_, other->stan_compile_request_);
  std::swap(stan_compile_response_, other->stan_compile_response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StanMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StanMessage_descriptor_;
  metadata.reflection = StanMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StanMessage

// optional .stan.serve.StanMessage.Type type = 1;
void StanMessage::clear_type() {
  type_ = 0;
}
 ::stan::serve::StanMessage_Type StanMessage::type() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanMessage.type)
  return static_cast< ::stan::serve::StanMessage_Type >(type_);
}
 void StanMessage::set_type(::stan::serve::StanMessage_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:stan.serve.StanMessage.type)
}

// optional .stan.serve.StanCompileRequest stan_compile_request = 2;
bool StanMessage::has_stan_compile_request() const {
  return !_is_default_instance_ && stan_compile_request_ != NULL;
}
void StanMessage::clear_stan_compile_request() {
  if (GetArenaNoVirtual() == NULL && stan_compile_request_ != NULL) delete stan_compile_request_;
  stan_compile_request_ = NULL;
}
const ::stan::serve::StanCompileRequest& StanMessage::stan_compile_request() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanMessage.stan_compile_request)
  return stan_compile_request_ != NULL ? *stan_compile_request_ : *default_instance_->stan_compile_request_;
}
::stan::serve::StanCompileRequest* StanMessage::mutable_stan_compile_request() {
  
  if (stan_compile_request_ == NULL) {
    stan_compile_request_ = new ::stan::serve::StanCompileRequest;
  }
  // @@protoc_insertion_point(field_mutable:stan.serve.StanMessage.stan_compile_request)
  return stan_compile_request_;
}
::stan::serve::StanCompileRequest* StanMessage::release_stan_compile_request() {
  
  ::stan::serve::StanCompileRequest* temp = stan_compile_request_;
  stan_compile_request_ = NULL;
  return temp;
}
void StanMessage::set_allocated_stan_compile_request(::stan::serve::StanCompileRequest* stan_compile_request) {
  delete stan_compile_request_;
  stan_compile_request_ = stan_compile_request;
  if (stan_compile_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:stan.serve.StanMessage.stan_compile_request)
}

// optional .stan.serve.StanCompileResponse stan_compile_response = 3;
bool StanMessage::has_stan_compile_response() const {
  return !_is_default_instance_ && stan_compile_response_ != NULL;
}
void StanMessage::clear_stan_compile_response() {
  if (GetArenaNoVirtual() == NULL && stan_compile_response_ != NULL) delete stan_compile_response_;
  stan_compile_response_ = NULL;
}
const ::stan::serve::StanCompileResponse& StanMessage::stan_compile_response() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanMessage.stan_compile_response)
  return stan_compile_response_ != NULL ? *stan_compile_response_ : *default_instance_->stan_compile_response_;
}
::stan::serve::StanCompileResponse* StanMessage::mutable_stan_compile_response() {
  
  if (stan_compile_response_ == NULL) {
    stan_compile_response_ = new ::stan::serve::StanCompileResponse;
  }
  // @@protoc_insertion_point(field_mutable:stan.serve.StanMessage.stan_compile_response)
  return stan_compile_response_;
}
::stan::serve::StanCompileResponse* StanMessage::release_stan_compile_response() {
  
  ::stan::serve::StanCompileResponse* temp = stan_compile_response_;
  stan_compile_response_ = NULL;
  return temp;
}
void StanMessage::set_allocated_stan_compile_response(::stan::serve::StanCompileResponse* stan_compile_response) {
  delete stan_compile_response_;
  stan_compile_response_ = stan_compile_response;
  if (stan_compile_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:stan.serve.StanMessage.stan_compile_response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StanVersion::kVersionFieldNumber;
const int StanVersion::kStanMathHashFieldNumber;
const int StanVersion::kStanStanHashFieldNumber;
#endif  // !_MSC_VER

StanVersion::StanVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stan.serve.StanVersion)
}

void StanVersion::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StanVersion::StanVersion(const StanVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stan.serve.StanVersion)
}

void StanVersion::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_math_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_stan_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StanVersion::~StanVersion() {
  // @@protoc_insertion_point(destructor:stan.serve.StanVersion)
  SharedDtor();
}

void StanVersion::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_math_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_stan_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StanVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StanVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanVersion_descriptor_;
}

const StanVersion& StanVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fstanc_2eproto();
  return *default_instance_;
}

StanVersion* StanVersion::default_instance_ = NULL;

StanVersion* StanVersion::New(::google::protobuf::Arena* arena) const {
  StanVersion* n = new StanVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StanVersion::Clear() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_math_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_stan_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StanVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stan.serve.StanVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stan.serve.StanVersion.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stan_math_hash;
        break;
      }

      // optional string stan_math_hash = 2;
      case 2: {
        if (tag == 18) {
         parse_stan_math_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stan_math_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stan_math_hash().data(), this->stan_math_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stan.serve.StanVersion.stan_math_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stan_stan_hash;
        break;
      }

      // optional string stan_stan_hash = 3;
      case 3: {
        if (tag == 26) {
         parse_stan_stan_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stan_stan_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stan_stan_hash().data(), this->stan_stan_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stan.serve.StanVersion.stan_stan_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stan.serve.StanVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stan.serve.StanVersion)
  return false;
#undef DO_
}

void StanVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stan.serve.StanVersion)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanVersion.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional string stan_math_hash = 2;
  if (this->stan_math_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stan_math_hash().data(), this->stan_math_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanVersion.stan_math_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stan_math_hash(), output);
  }

  // optional string stan_stan_hash = 3;
  if (this->stan_stan_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stan_stan_hash().data(), this->stan_stan_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanVersion.stan_stan_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stan_stan_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:stan.serve.StanVersion)
}

::google::protobuf::uint8* StanVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stan.serve.StanVersion)
  // optional string version = 1;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanVersion.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string stan_math_hash = 2;
  if (this->stan_math_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stan_math_hash().data(), this->stan_math_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanVersion.stan_math_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stan_math_hash(), target);
  }

  // optional string stan_stan_hash = 3;
  if (this->stan_stan_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stan_stan_hash().data(), this->stan_stan_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanVersion.stan_stan_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stan_stan_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:stan.serve.StanVersion)
  return target;
}

int StanVersion::ByteSize() const {
  int total_size = 0;

  // optional string version = 1;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional string stan_math_hash = 2;
  if (this->stan_math_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stan_math_hash());
  }

  // optional string stan_stan_hash = 3;
  if (this->stan_stan_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stan_stan_hash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StanVersion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StanVersion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StanVersion>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StanVersion::MergeFrom(const StanVersion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.stan_math_hash().size() > 0) {

    stan_math_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stan_math_hash_);
  }
  if (from.stan_stan_hash().size() > 0) {

    stan_stan_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stan_stan_hash_);
  }
}

void StanVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StanVersion::CopyFrom(const StanVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StanVersion::IsInitialized() const {

  return true;
}

void StanVersion::Swap(StanVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StanVersion::InternalSwap(StanVersion* other) {
  version_.Swap(&other->version_);
  stan_math_hash_.Swap(&other->stan_math_hash_);
  stan_stan_hash_.Swap(&other->stan_stan_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StanVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StanVersion_descriptor_;
  metadata.reflection = StanVersion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StanVersion

// optional string version = 1;
void StanVersion::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StanVersion::version() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanVersion.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stan.serve.StanVersion.version)
}
 void StanVersion::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stan.serve.StanVersion.version)
}
 void StanVersion::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stan.serve.StanVersion.version)
}
 ::std::string* StanVersion::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:stan.serve.StanVersion.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanVersion::release_version() {
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:stan.serve.StanVersion.version)
}

// optional string stan_math_hash = 2;
void StanVersion::clear_stan_math_hash() {
  stan_math_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StanVersion::stan_math_hash() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanVersion.stan_math_hash)
  return stan_math_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_stan_math_hash(const ::std::string& value) {
  
  stan_math_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stan.serve.StanVersion.stan_math_hash)
}
 void StanVersion::set_stan_math_hash(const char* value) {
  
  stan_math_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stan.serve.StanVersion.stan_math_hash)
}
 void StanVersion::set_stan_math_hash(const char* value, size_t size) {
  
  stan_math_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stan.serve.StanVersion.stan_math_hash)
}
 ::std::string* StanVersion::mutable_stan_math_hash() {
  
  // @@protoc_insertion_point(field_mutable:stan.serve.StanVersion.stan_math_hash)
  return stan_math_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanVersion::release_stan_math_hash() {
  
  return stan_math_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_allocated_stan_math_hash(::std::string* stan_math_hash) {
  if (stan_math_hash != NULL) {
    
  } else {
    
  }
  stan_math_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stan_math_hash);
  // @@protoc_insertion_point(field_set_allocated:stan.serve.StanVersion.stan_math_hash)
}

// optional string stan_stan_hash = 3;
void StanVersion::clear_stan_stan_hash() {
  stan_stan_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StanVersion::stan_stan_hash() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanVersion.stan_stan_hash)
  return stan_stan_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_stan_stan_hash(const ::std::string& value) {
  
  stan_stan_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stan.serve.StanVersion.stan_stan_hash)
}
 void StanVersion::set_stan_stan_hash(const char* value) {
  
  stan_stan_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stan.serve.StanVersion.stan_stan_hash)
}
 void StanVersion::set_stan_stan_hash(const char* value, size_t size) {
  
  stan_stan_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stan.serve.StanVersion.stan_stan_hash)
}
 ::std::string* StanVersion::mutable_stan_stan_hash() {
  
  // @@protoc_insertion_point(field_mutable:stan.serve.StanVersion.stan_stan_hash)
  return stan_stan_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanVersion::release_stan_stan_hash() {
  
  return stan_stan_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_allocated_stan_stan_hash(::std::string* stan_stan_hash) {
  if (stan_stan_hash != NULL) {
    
  } else {
    
  }
  stan_stan_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stan_stan_hash);
  // @@protoc_insertion_point(field_set_allocated:stan.serve.StanVersion.stan_stan_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StanCompileRequest::kModelNameFieldNumber;
const int StanCompileRequest::kModelCodeFieldNumber;
const int StanCompileRequest::kModelFileNameFieldNumber;
#endif  // !_MSC_VER

StanCompileRequest::StanCompileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stan.serve.StanCompileRequest)
}

void StanCompileRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StanCompileRequest::StanCompileRequest(const StanCompileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stan.serve.StanCompileRequest)
}

void StanCompileRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StanCompileRequest::~StanCompileRequest() {
  // @@protoc_insertion_point(destructor:stan.serve.StanCompileRequest)
  SharedDtor();
}

void StanCompileRequest::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StanCompileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StanCompileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanCompileRequest_descriptor_;
}

const StanCompileRequest& StanCompileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fstanc_2eproto();
  return *default_instance_;
}

StanCompileRequest* StanCompileRequest::default_instance_ = NULL;

StanCompileRequest* StanCompileRequest::New(::google::protobuf::Arena* arena) const {
  StanCompileRequest* n = new StanCompileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StanCompileRequest::Clear() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StanCompileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stan.serve.StanCompileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stan.serve.StanCompileRequest.model_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model_code;
        break;
      }

      // optional string model_code = 2;
      case 2: {
        if (tag == 18) {
         parse_model_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_code().data(), this->model_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stan.serve.StanCompileRequest.model_code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model_file_name;
        break;
      }

      // optional string model_file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_model_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_file_name().data(), this->model_file_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stan.serve.StanCompileRequest.model_file_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stan.serve.StanCompileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stan.serve.StanCompileRequest)
  return false;
#undef DO_
}

void StanCompileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stan.serve.StanCompileRequest)
  // optional string model_name = 1;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanCompileRequest.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // optional string model_code = 2;
  if (this->model_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_code().data(), this->model_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanCompileRequest.model_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_code(), output);
  }

  // optional string model_file_name = 3;
  if (this->model_file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_file_name().data(), this->model_file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanCompileRequest.model_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model_file_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:stan.serve.StanCompileRequest)
}

::google::protobuf::uint8* StanCompileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stan.serve.StanCompileRequest)
  // optional string model_name = 1;
  if (this->model_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanCompileRequest.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // optional string model_code = 2;
  if (this->model_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_code().data(), this->model_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanCompileRequest.model_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_code(), target);
  }

  // optional string model_file_name = 3;
  if (this->model_file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_file_name().data(), this->model_file_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanCompileRequest.model_file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model_file_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:stan.serve.StanCompileRequest)
  return target;
}

int StanCompileRequest::ByteSize() const {
  int total_size = 0;

  // optional string model_name = 1;
  if (this->model_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  // optional string model_code = 2;
  if (this->model_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_code());
  }

  // optional string model_file_name = 3;
  if (this->model_file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_file_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StanCompileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StanCompileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StanCompileRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StanCompileRequest::MergeFrom(const StanCompileRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.model_name().size() > 0) {

    model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.model_code().size() > 0) {

    model_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_code_);
  }
  if (from.model_file_name().size() > 0) {

    model_file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_file_name_);
  }
}

void StanCompileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StanCompileRequest::CopyFrom(const StanCompileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StanCompileRequest::IsInitialized() const {

  return true;
}

void StanCompileRequest::Swap(StanCompileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StanCompileRequest::InternalSwap(StanCompileRequest* other) {
  model_name_.Swap(&other->model_name_);
  model_code_.Swap(&other->model_code_);
  model_file_name_.Swap(&other->model_file_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StanCompileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StanCompileRequest_descriptor_;
  metadata.reflection = StanCompileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StanCompileRequest

// optional string model_name = 1;
void StanCompileRequest::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StanCompileRequest::model_name() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanCompileRequest.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_model_name(const ::std::string& value) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stan.serve.StanCompileRequest.model_name)
}
 void StanCompileRequest::set_model_name(const char* value) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stan.serve.StanCompileRequest.model_name)
}
 void StanCompileRequest::set_model_name(const char* value, size_t size) {
  
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stan.serve.StanCompileRequest.model_name)
}
 ::std::string* StanCompileRequest::mutable_model_name() {
  
  // @@protoc_insertion_point(field_mutable:stan.serve.StanCompileRequest.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileRequest::release_model_name() {
  
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    
  } else {
    
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:stan.serve.StanCompileRequest.model_name)
}

// optional string model_code = 2;
void StanCompileRequest::clear_model_code() {
  model_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StanCompileRequest::model_code() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanCompileRequest.model_code)
  return model_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_model_code(const ::std::string& value) {
  
  model_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stan.serve.StanCompileRequest.model_code)
}
 void StanCompileRequest::set_model_code(const char* value) {
  
  model_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stan.serve.StanCompileRequest.model_code)
}
 void StanCompileRequest::set_model_code(const char* value, size_t size) {
  
  model_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stan.serve.StanCompileRequest.model_code)
}
 ::std::string* StanCompileRequest::mutable_model_code() {
  
  // @@protoc_insertion_point(field_mutable:stan.serve.StanCompileRequest.model_code)
  return model_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileRequest::release_model_code() {
  
  return model_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_allocated_model_code(::std::string* model_code) {
  if (model_code != NULL) {
    
  } else {
    
  }
  model_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_code);
  // @@protoc_insertion_point(field_set_allocated:stan.serve.StanCompileRequest.model_code)
}

// optional string model_file_name = 3;
void StanCompileRequest::clear_model_file_name() {
  model_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StanCompileRequest::model_file_name() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanCompileRequest.model_file_name)
  return model_file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_model_file_name(const ::std::string& value) {
  
  model_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stan.serve.StanCompileRequest.model_file_name)
}
 void StanCompileRequest::set_model_file_name(const char* value) {
  
  model_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stan.serve.StanCompileRequest.model_file_name)
}
 void StanCompileRequest::set_model_file_name(const char* value, size_t size) {
  
  model_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stan.serve.StanCompileRequest.model_file_name)
}
 ::std::string* StanCompileRequest::mutable_model_file_name() {
  
  // @@protoc_insertion_point(field_mutable:stan.serve.StanCompileRequest.model_file_name)
  return model_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileRequest::release_model_file_name() {
  
  return model_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_allocated_model_file_name(::std::string* model_file_name) {
  if (model_file_name != NULL) {
    
  } else {
    
  }
  model_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_file_name);
  // @@protoc_insertion_point(field_set_allocated:stan.serve.StanCompileRequest.model_file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* StanCompileResponse_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanCompileResponse_State_descriptor_;
}
bool StanCompileResponse_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StanCompileResponse_State StanCompileResponse::UNKNOWN;
const StanCompileResponse_State StanCompileResponse::INCOMPLETE;
const StanCompileResponse_State StanCompileResponse::SUCCESS;
const StanCompileResponse_State StanCompileResponse::WARN;
const StanCompileResponse_State StanCompileResponse::ERROR;
const StanCompileResponse_State StanCompileResponse::State_MIN;
const StanCompileResponse_State StanCompileResponse::State_MAX;
const int StanCompileResponse::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StanCompileResponse::kStateFieldNumber;
const int StanCompileResponse::kCppCodeFieldNumber;
const int StanCompileResponse::kMessagesFieldNumber;
#endif  // !_MSC_VER

StanCompileResponse::StanCompileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stan.serve.StanCompileResponse)
}

void StanCompileResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StanCompileResponse::StanCompileResponse(const StanCompileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stan.serve.StanCompileResponse)
}

void StanCompileResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  state_ = 0;
  cpp_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messages_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StanCompileResponse::~StanCompileResponse() {
  // @@protoc_insertion_point(destructor:stan.serve.StanCompileResponse)
  SharedDtor();
}

void StanCompileResponse::SharedDtor() {
  cpp_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messages_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StanCompileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StanCompileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanCompileResponse_descriptor_;
}

const StanCompileResponse& StanCompileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fstanc_2eproto();
  return *default_instance_;
}

StanCompileResponse* StanCompileResponse::default_instance_ = NULL;

StanCompileResponse* StanCompileResponse::New(::google::protobuf::Arena* arena) const {
  StanCompileResponse* n = new StanCompileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StanCompileResponse::Clear() {
  state_ = 0;
  cpp_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messages_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StanCompileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stan.serve.StanCompileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .stan.serve.StanCompileResponse.State state = 2;
      case 2: {
        if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::stan::serve::StanCompileResponse_State >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cpp_code;
        break;
      }

      // optional string cpp_code = 3;
      case 3: {
        if (tag == 26) {
         parse_cpp_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpp_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cpp_code().data(), this->cpp_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stan.serve.StanCompileResponse.cpp_code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_messages;
        break;
      }

      // optional string messages = 4;
      case 4: {
        if (tag == 34) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messages()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->messages().data(), this->messages().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "stan.serve.StanCompileResponse.messages"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stan.serve.StanCompileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stan.serve.StanCompileResponse)
  return false;
#undef DO_
}

void StanCompileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stan.serve.StanCompileResponse)
  // optional .stan.serve.StanCompileResponse.State state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional string cpp_code = 3;
  if (this->cpp_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cpp_code().data(), this->cpp_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanCompileResponse.cpp_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cpp_code(), output);
  }

  // optional string messages = 4;
  if (this->messages().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->messages().data(), this->messages().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanCompileResponse.messages");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->messages(), output);
  }

  // @@protoc_insertion_point(serialize_end:stan.serve.StanCompileResponse)
}

::google::protobuf::uint8* StanCompileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stan.serve.StanCompileResponse)
  // optional .stan.serve.StanCompileResponse.State state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional string cpp_code = 3;
  if (this->cpp_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cpp_code().data(), this->cpp_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanCompileResponse.cpp_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cpp_code(), target);
  }

  // optional string messages = 4;
  if (this->messages().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->messages().data(), this->messages().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "stan.serve.StanCompileResponse.messages");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->messages(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:stan.serve.StanCompileResponse)
  return target;
}

int StanCompileResponse::ByteSize() const {
  int total_size = 0;

  // optional .stan.serve.StanCompileResponse.State state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional string cpp_code = 3;
  if (this->cpp_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cpp_code());
  }

  // optional string messages = 4;
  if (this->messages().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messages());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StanCompileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StanCompileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StanCompileResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StanCompileResponse::MergeFrom(const StanCompileResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.cpp_code().size() > 0) {

    cpp_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpp_code_);
  }
  if (from.messages().size() > 0) {

    messages_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messages_);
  }
}

void StanCompileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StanCompileResponse::CopyFrom(const StanCompileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StanCompileResponse::IsInitialized() const {

  return true;
}

void StanCompileResponse::Swap(StanCompileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StanCompileResponse::InternalSwap(StanCompileResponse* other) {
  std::swap(state_, other->state_);
  cpp_code_.Swap(&other->cpp_code_);
  messages_.Swap(&other->messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StanCompileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StanCompileResponse_descriptor_;
  metadata.reflection = StanCompileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StanCompileResponse

// optional .stan.serve.StanCompileResponse.State state = 2;
void StanCompileResponse::clear_state() {
  state_ = 0;
}
 ::stan::serve::StanCompileResponse_State StanCompileResponse::state() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanCompileResponse.state)
  return static_cast< ::stan::serve::StanCompileResponse_State >(state_);
}
 void StanCompileResponse::set_state(::stan::serve::StanCompileResponse_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:stan.serve.StanCompileResponse.state)
}

// optional string cpp_code = 3;
void StanCompileResponse::clear_cpp_code() {
  cpp_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StanCompileResponse::cpp_code() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanCompileResponse.cpp_code)
  return cpp_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileResponse::set_cpp_code(const ::std::string& value) {
  
  cpp_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stan.serve.StanCompileResponse.cpp_code)
}
 void StanCompileResponse::set_cpp_code(const char* value) {
  
  cpp_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stan.serve.StanCompileResponse.cpp_code)
}
 void StanCompileResponse::set_cpp_code(const char* value, size_t size) {
  
  cpp_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stan.serve.StanCompileResponse.cpp_code)
}
 ::std::string* StanCompileResponse::mutable_cpp_code() {
  
  // @@protoc_insertion_point(field_mutable:stan.serve.StanCompileResponse.cpp_code)
  return cpp_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileResponse::release_cpp_code() {
  
  return cpp_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileResponse::set_allocated_cpp_code(::std::string* cpp_code) {
  if (cpp_code != NULL) {
    
  } else {
    
  }
  cpp_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpp_code);
  // @@protoc_insertion_point(field_set_allocated:stan.serve.StanCompileResponse.cpp_code)
}

// optional string messages = 4;
void StanCompileResponse::clear_messages() {
  messages_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StanCompileResponse::messages() const {
  // @@protoc_insertion_point(field_get:stan.serve.StanCompileResponse.messages)
  return messages_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileResponse::set_messages(const ::std::string& value) {
  
  messages_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stan.serve.StanCompileResponse.messages)
}
 void StanCompileResponse::set_messages(const char* value) {
  
  messages_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stan.serve.StanCompileResponse.messages)
}
 void StanCompileResponse::set_messages(const char* value, size_t size) {
  
  messages_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stan.serve.StanCompileResponse.messages)
}
 ::std::string* StanCompileResponse::mutable_messages() {
  
  // @@protoc_insertion_point(field_mutable:stan.serve.StanCompileResponse.messages)
  return messages_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileResponse::release_messages() {
  
  return messages_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileResponse::set_allocated_messages(::std::string* messages) {
  if (messages != NULL) {
    
  } else {
    
  }
  messages_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messages);
  // @@protoc_insertion_point(field_set_allocated:stan.serve.StanCompileResponse.messages)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace serve
}  // namespace stan

// @@protoc_insertion_point(global_scope)
