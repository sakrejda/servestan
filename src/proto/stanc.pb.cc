// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/stanc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/stanc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* StanMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StanMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StanMessage_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* StanVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StanVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* StanCompileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StanCompileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StanCompileCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StanCompileCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* StanCompileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StanCompileResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StanCompileResponse_State_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fstanc_2eproto() {
  protobuf_AddDesc_proto_2fstanc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/stanc.proto");
  GOOGLE_CHECK(file != NULL);
  StanMessage_descriptor_ = file->message_type(0);
  static const int StanMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, stan_compile_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, stan_compile_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, stan_compile_check_),
  };
  StanMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StanMessage_descriptor_,
      StanMessage::default_instance_,
      StanMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(StanMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanMessage, _internal_metadata_),
      -1);
  StanMessage_Type_descriptor_ = StanMessage_descriptor_->enum_type(0);
  StanVersion_descriptor_ = file->message_type(1);
  static const int StanVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanVersion, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanVersion, stan_math_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanVersion, stan_stan_hash_),
  };
  StanVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StanVersion_descriptor_,
      StanVersion::default_instance_,
      StanVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanVersion, _has_bits_[0]),
      -1,
      -1,
      sizeof(StanVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanVersion, _internal_metadata_),
      -1);
  StanCompileRequest_descriptor_ = file->message_type(2);
  static const int StanCompileRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileRequest, model_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileRequest, model_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileRequest, model_file_name_),
  };
  StanCompileRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StanCompileRequest_descriptor_,
      StanCompileRequest::default_instance_,
      StanCompileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(StanCompileRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileRequest, _internal_metadata_),
      -1);
  StanCompileCheck_descriptor_ = file->message_type(3);
  static const int StanCompileCheck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileCheck, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileCheck, stan_version_),
  };
  StanCompileCheck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StanCompileCheck_descriptor_,
      StanCompileCheck::default_instance_,
      StanCompileCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileCheck, _has_bits_[0]),
      -1,
      -1,
      sizeof(StanCompileCheck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileCheck, _internal_metadata_),
      -1);
  StanCompileResponse_descriptor_ = file->message_type(4);
  static const int StanCompileResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, cpp_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, messages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, stan_version_),
  };
  StanCompileResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StanCompileResponse_descriptor_,
      StanCompileResponse::default_instance_,
      StanCompileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(StanCompileResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StanCompileResponse, _internal_metadata_),
      -1);
  StanCompileResponse_State_descriptor_ = StanCompileResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fstanc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StanMessage_descriptor_, &StanMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StanVersion_descriptor_, &StanVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StanCompileRequest_descriptor_, &StanCompileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StanCompileCheck_descriptor_, &StanCompileCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StanCompileResponse_descriptor_, &StanCompileResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fstanc_2eproto() {
  delete StanMessage::default_instance_;
  delete StanMessage_reflection_;
  delete StanVersion::default_instance_;
  delete StanVersion_reflection_;
  delete StanCompileRequest::default_instance_;
  delete StanCompileRequest_reflection_;
  delete StanCompileCheck::default_instance_;
  delete StanCompileCheck_reflection_;
  delete StanCompileResponse::default_instance_;
  delete StanCompileResponse_reflection_;
}

void protobuf_AddDesc_proto_2fstanc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021proto/stanc.proto\"\252\002\n\013StanMessage\022\037\n\004t"
    "ype\030\001 \002(\0162\021.StanMessage.Type\0221\n\024stan_com"
    "pile_request\030\002 \001(\0132\023.StanCompileRequest\022"
    "3\n\025stan_compile_response\030\003 \001(\0132\024.StanCom"
    "pileResponse\022-\n\022stan_compile_check\030\004 \001(\013"
    "2\021.StanCompileCheck\"c\n\004Type\022\016\n\nSTAN_EMPT"
    "Y\020\000\022\030\n\024STAN_COMPILE_REQUEST\020\001\022\031\n\025STAN_CO"
    "MPILE_RESPONSE\020\002\022\026\n\022STAN_COMPILE_CHECK\020\003"
    "\"N\n\013StanVersion\022\017\n\007version\030\001 \002(\t\022\026\n\016stan"
    "_math_hash\030\002 \001(\t\022\026\n\016stan_stan_hash\030\003 \001(\t"
    "\"U\n\022StanCompileRequest\022\022\n\nmodel_name\030\001 \001"
    "(\t\022\022\n\nmodel_code\030\002 \002(\t\022\027\n\017model_file_nam"
    "e\030\003 \001(\t\"D\n\020StanCompileCheck\022\014\n\004hash\030\001 \002("
    "\t\022\"\n\014stan_version\030\002 \001(\0132\014.StanVersion\"\361\001"
    "\n\023StanCompileResponse\022\014\n\004hash\030\001 \002(\t\022)\n\005s"
    "tate\030\002 \002(\0162\032.StanCompileResponse.State\022\020"
    "\n\010cpp_code\030\003 \001(\t\022\020\n\010messages\030\004 \001(\t\022\"\n\014st"
    "an_version\030\005 \002(\0132\014.StanVersion\"Y\n\005State\022"
    "\026\n\022COMPILE_INCOMPLETE\020\000\022\023\n\017COMPILE_SUCCE"
    "SS\020\001\022\020\n\014COMPILE_WARN\020\002\022\021\n\rCOMPILE_ERROR\020"
    "\0032\212\001\n\016CompileService\022=\n\016CompileProgram\022\023"
    ".StanCompileRequest\032\024.StanCompileRespons"
    "e\"\000\0229\n\014CompileCheck\022\021.StanCompileCheck\032\024"
    ".StanCompileResponse\"\000", 942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/stanc.proto", &protobuf_RegisterTypes);
  StanMessage::default_instance_ = new StanMessage();
  StanVersion::default_instance_ = new StanVersion();
  StanCompileRequest::default_instance_ = new StanCompileRequest();
  StanCompileCheck::default_instance_ = new StanCompileCheck();
  StanCompileResponse::default_instance_ = new StanCompileResponse();
  StanMessage::default_instance_->InitAsDefaultInstance();
  StanVersion::default_instance_->InitAsDefaultInstance();
  StanCompileRequest::default_instance_->InitAsDefaultInstance();
  StanCompileCheck::default_instance_->InitAsDefaultInstance();
  StanCompileResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fstanc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fstanc_2eproto {
  StaticDescriptorInitializer_proto_2fstanc_2eproto() {
    protobuf_AddDesc_proto_2fstanc_2eproto();
  }
} static_descriptor_initializer_proto_2fstanc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* StanMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanMessage_Type_descriptor_;
}
bool StanMessage_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StanMessage_Type StanMessage::STAN_EMPTY;
const StanMessage_Type StanMessage::STAN_COMPILE_REQUEST;
const StanMessage_Type StanMessage::STAN_COMPILE_RESPONSE;
const StanMessage_Type StanMessage::STAN_COMPILE_CHECK;
const StanMessage_Type StanMessage::Type_MIN;
const StanMessage_Type StanMessage::Type_MAX;
const int StanMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StanMessage::kTypeFieldNumber;
const int StanMessage::kStanCompileRequestFieldNumber;
const int StanMessage::kStanCompileResponseFieldNumber;
const int StanMessage::kStanCompileCheckFieldNumber;
#endif  // !_MSC_VER

StanMessage::StanMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StanMessage)
}

void StanMessage::InitAsDefaultInstance() {
  stan_compile_request_ = const_cast< ::StanCompileRequest*>(&::StanCompileRequest::default_instance());
  stan_compile_response_ = const_cast< ::StanCompileResponse*>(&::StanCompileResponse::default_instance());
  stan_compile_check_ = const_cast< ::StanCompileCheck*>(&::StanCompileCheck::default_instance());
}

StanMessage::StanMessage(const StanMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StanMessage)
}

void StanMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  stan_compile_request_ = NULL;
  stan_compile_response_ = NULL;
  stan_compile_check_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StanMessage::~StanMessage() {
  // @@protoc_insertion_point(destructor:StanMessage)
  SharedDtor();
}

void StanMessage::SharedDtor() {
  if (this != default_instance_) {
    delete stan_compile_request_;
    delete stan_compile_response_;
    delete stan_compile_check_;
  }
}

void StanMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StanMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanMessage_descriptor_;
}

const StanMessage& StanMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fstanc_2eproto();
  return *default_instance_;
}

StanMessage* StanMessage::default_instance_ = NULL;

StanMessage* StanMessage::New(::google::protobuf::Arena* arena) const {
  StanMessage* n = new StanMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StanMessage::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    type_ = 0;
    if (has_stan_compile_request()) {
      if (stan_compile_request_ != NULL) stan_compile_request_->::StanCompileRequest::Clear();
    }
    if (has_stan_compile_response()) {
      if (stan_compile_response_ != NULL) stan_compile_response_->::StanCompileResponse::Clear();
    }
    if (has_stan_compile_check()) {
      if (stan_compile_check_ != NULL) stan_compile_check_->::StanCompileCheck::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StanMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StanMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .StanMessage.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StanMessage_Type_IsValid(value)) {
            set_type(static_cast< ::StanMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stan_compile_request;
        break;
      }

      // optional .StanCompileRequest stan_compile_request = 2;
      case 2: {
        if (tag == 18) {
         parse_stan_compile_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stan_compile_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stan_compile_response;
        break;
      }

      // optional .StanCompileResponse stan_compile_response = 3;
      case 3: {
        if (tag == 26) {
         parse_stan_compile_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stan_compile_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stan_compile_check;
        break;
      }

      // optional .StanCompileCheck stan_compile_check = 4;
      case 4: {
        if (tag == 34) {
         parse_stan_compile_check:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stan_compile_check()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StanMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StanMessage)
  return false;
#undef DO_
}

void StanMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StanMessage)
  // required .StanMessage.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .StanCompileRequest stan_compile_request = 2;
  if (has_stan_compile_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stan_compile_request_, output);
  }

  // optional .StanCompileResponse stan_compile_response = 3;
  if (has_stan_compile_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stan_compile_response_, output);
  }

  // optional .StanCompileCheck stan_compile_check = 4;
  if (has_stan_compile_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->stan_compile_check_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StanMessage)
}

::google::protobuf::uint8* StanMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StanMessage)
  // required .StanMessage.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .StanCompileRequest stan_compile_request = 2;
  if (has_stan_compile_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->stan_compile_request_, target);
  }

  // optional .StanCompileResponse stan_compile_response = 3;
  if (has_stan_compile_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->stan_compile_response_, target);
  }

  // optional .StanCompileCheck stan_compile_check = 4;
  if (has_stan_compile_check()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->stan_compile_check_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StanMessage)
  return target;
}

int StanMessage::ByteSize() const {
  int total_size = 0;

  // required .StanMessage.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional .StanCompileRequest stan_compile_request = 2;
    if (has_stan_compile_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stan_compile_request_);
    }

    // optional .StanCompileResponse stan_compile_response = 3;
    if (has_stan_compile_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stan_compile_response_);
    }

    // optional .StanCompileCheck stan_compile_check = 4;
    if (has_stan_compile_check()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stan_compile_check_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StanMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StanMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StanMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StanMessage::MergeFrom(const StanMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_stan_compile_request()) {
      mutable_stan_compile_request()->::StanCompileRequest::MergeFrom(from.stan_compile_request());
    }
    if (from.has_stan_compile_response()) {
      mutable_stan_compile_response()->::StanCompileResponse::MergeFrom(from.stan_compile_response());
    }
    if (from.has_stan_compile_check()) {
      mutable_stan_compile_check()->::StanCompileCheck::MergeFrom(from.stan_compile_check());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StanMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StanMessage::CopyFrom(const StanMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StanMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_stan_compile_request()) {
    if (!this->stan_compile_request_->IsInitialized()) return false;
  }
  if (has_stan_compile_response()) {
    if (!this->stan_compile_response_->IsInitialized()) return false;
  }
  if (has_stan_compile_check()) {
    if (!this->stan_compile_check_->IsInitialized()) return false;
  }
  return true;
}

void StanMessage::Swap(StanMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StanMessage::InternalSwap(StanMessage* other) {
  std::swap(type_, other->type_);
  std::swap(stan_compile_request_, other->stan_compile_request_);
  std::swap(stan_compile_response_, other->stan_compile_response_);
  std::swap(stan_compile_check_, other->stan_compile_check_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StanMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StanMessage_descriptor_;
  metadata.reflection = StanMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StanMessage

// required .StanMessage.Type type = 1;
bool StanMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StanMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void StanMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void StanMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::StanMessage_Type StanMessage::type() const {
  // @@protoc_insertion_point(field_get:StanMessage.type)
  return static_cast< ::StanMessage_Type >(type_);
}
 void StanMessage::set_type(::StanMessage_Type value) {
  assert(::StanMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:StanMessage.type)
}

// optional .StanCompileRequest stan_compile_request = 2;
bool StanMessage::has_stan_compile_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StanMessage::set_has_stan_compile_request() {
  _has_bits_[0] |= 0x00000002u;
}
void StanMessage::clear_has_stan_compile_request() {
  _has_bits_[0] &= ~0x00000002u;
}
void StanMessage::clear_stan_compile_request() {
  if (stan_compile_request_ != NULL) stan_compile_request_->::StanCompileRequest::Clear();
  clear_has_stan_compile_request();
}
const ::StanCompileRequest& StanMessage::stan_compile_request() const {
  // @@protoc_insertion_point(field_get:StanMessage.stan_compile_request)
  return stan_compile_request_ != NULL ? *stan_compile_request_ : *default_instance_->stan_compile_request_;
}
::StanCompileRequest* StanMessage::mutable_stan_compile_request() {
  set_has_stan_compile_request();
  if (stan_compile_request_ == NULL) {
    stan_compile_request_ = new ::StanCompileRequest;
  }
  // @@protoc_insertion_point(field_mutable:StanMessage.stan_compile_request)
  return stan_compile_request_;
}
::StanCompileRequest* StanMessage::release_stan_compile_request() {
  clear_has_stan_compile_request();
  ::StanCompileRequest* temp = stan_compile_request_;
  stan_compile_request_ = NULL;
  return temp;
}
void StanMessage::set_allocated_stan_compile_request(::StanCompileRequest* stan_compile_request) {
  delete stan_compile_request_;
  stan_compile_request_ = stan_compile_request;
  if (stan_compile_request) {
    set_has_stan_compile_request();
  } else {
    clear_has_stan_compile_request();
  }
  // @@protoc_insertion_point(field_set_allocated:StanMessage.stan_compile_request)
}

// optional .StanCompileResponse stan_compile_response = 3;
bool StanMessage::has_stan_compile_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StanMessage::set_has_stan_compile_response() {
  _has_bits_[0] |= 0x00000004u;
}
void StanMessage::clear_has_stan_compile_response() {
  _has_bits_[0] &= ~0x00000004u;
}
void StanMessage::clear_stan_compile_response() {
  if (stan_compile_response_ != NULL) stan_compile_response_->::StanCompileResponse::Clear();
  clear_has_stan_compile_response();
}
const ::StanCompileResponse& StanMessage::stan_compile_response() const {
  // @@protoc_insertion_point(field_get:StanMessage.stan_compile_response)
  return stan_compile_response_ != NULL ? *stan_compile_response_ : *default_instance_->stan_compile_response_;
}
::StanCompileResponse* StanMessage::mutable_stan_compile_response() {
  set_has_stan_compile_response();
  if (stan_compile_response_ == NULL) {
    stan_compile_response_ = new ::StanCompileResponse;
  }
  // @@protoc_insertion_point(field_mutable:StanMessage.stan_compile_response)
  return stan_compile_response_;
}
::StanCompileResponse* StanMessage::release_stan_compile_response() {
  clear_has_stan_compile_response();
  ::StanCompileResponse* temp = stan_compile_response_;
  stan_compile_response_ = NULL;
  return temp;
}
void StanMessage::set_allocated_stan_compile_response(::StanCompileResponse* stan_compile_response) {
  delete stan_compile_response_;
  stan_compile_response_ = stan_compile_response;
  if (stan_compile_response) {
    set_has_stan_compile_response();
  } else {
    clear_has_stan_compile_response();
  }
  // @@protoc_insertion_point(field_set_allocated:StanMessage.stan_compile_response)
}

// optional .StanCompileCheck stan_compile_check = 4;
bool StanMessage::has_stan_compile_check() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StanMessage::set_has_stan_compile_check() {
  _has_bits_[0] |= 0x00000008u;
}
void StanMessage::clear_has_stan_compile_check() {
  _has_bits_[0] &= ~0x00000008u;
}
void StanMessage::clear_stan_compile_check() {
  if (stan_compile_check_ != NULL) stan_compile_check_->::StanCompileCheck::Clear();
  clear_has_stan_compile_check();
}
const ::StanCompileCheck& StanMessage::stan_compile_check() const {
  // @@protoc_insertion_point(field_get:StanMessage.stan_compile_check)
  return stan_compile_check_ != NULL ? *stan_compile_check_ : *default_instance_->stan_compile_check_;
}
::StanCompileCheck* StanMessage::mutable_stan_compile_check() {
  set_has_stan_compile_check();
  if (stan_compile_check_ == NULL) {
    stan_compile_check_ = new ::StanCompileCheck;
  }
  // @@protoc_insertion_point(field_mutable:StanMessage.stan_compile_check)
  return stan_compile_check_;
}
::StanCompileCheck* StanMessage::release_stan_compile_check() {
  clear_has_stan_compile_check();
  ::StanCompileCheck* temp = stan_compile_check_;
  stan_compile_check_ = NULL;
  return temp;
}
void StanMessage::set_allocated_stan_compile_check(::StanCompileCheck* stan_compile_check) {
  delete stan_compile_check_;
  stan_compile_check_ = stan_compile_check;
  if (stan_compile_check) {
    set_has_stan_compile_check();
  } else {
    clear_has_stan_compile_check();
  }
  // @@protoc_insertion_point(field_set_allocated:StanMessage.stan_compile_check)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StanVersion::kVersionFieldNumber;
const int StanVersion::kStanMathHashFieldNumber;
const int StanVersion::kStanStanHashFieldNumber;
#endif  // !_MSC_VER

StanVersion::StanVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StanVersion)
}

void StanVersion::InitAsDefaultInstance() {
}

StanVersion::StanVersion(const StanVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StanVersion)
}

void StanVersion::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_math_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_stan_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StanVersion::~StanVersion() {
  // @@protoc_insertion_point(destructor:StanVersion)
  SharedDtor();
}

void StanVersion::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_math_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_stan_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StanVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StanVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanVersion_descriptor_;
}

const StanVersion& StanVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fstanc_2eproto();
  return *default_instance_;
}

StanVersion* StanVersion::default_instance_ = NULL;

StanVersion* StanVersion::New(::google::protobuf::Arena* arena) const {
  StanVersion* n = new StanVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StanVersion::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_version()) {
      version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stan_math_hash()) {
      stan_math_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stan_stan_hash()) {
      stan_stan_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StanVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StanVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StanVersion.version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stan_math_hash;
        break;
      }

      // optional string stan_math_hash = 2;
      case 2: {
        if (tag == 18) {
         parse_stan_math_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stan_math_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stan_math_hash().data(), this->stan_math_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StanVersion.stan_math_hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stan_stan_hash;
        break;
      }

      // optional string stan_stan_hash = 3;
      case 3: {
        if (tag == 26) {
         parse_stan_stan_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stan_stan_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stan_stan_hash().data(), this->stan_stan_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StanVersion.stan_stan_hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StanVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StanVersion)
  return false;
#undef DO_
}

void StanVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StanVersion)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanVersion.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional string stan_math_hash = 2;
  if (has_stan_math_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stan_math_hash().data(), this->stan_math_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanVersion.stan_math_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stan_math_hash(), output);
  }

  // optional string stan_stan_hash = 3;
  if (has_stan_stan_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stan_stan_hash().data(), this->stan_stan_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanVersion.stan_stan_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stan_stan_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StanVersion)
}

::google::protobuf::uint8* StanVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StanVersion)
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanVersion.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string stan_math_hash = 2;
  if (has_stan_math_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stan_math_hash().data(), this->stan_math_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanVersion.stan_math_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stan_math_hash(), target);
  }

  // optional string stan_stan_hash = 3;
  if (has_stan_stan_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stan_stan_hash().data(), this->stan_stan_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanVersion.stan_stan_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stan_stan_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StanVersion)
  return target;
}

int StanVersion::ByteSize() const {
  int total_size = 0;

  // required string version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string stan_math_hash = 2;
    if (has_stan_math_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stan_math_hash());
    }

    // optional string stan_stan_hash = 3;
    if (has_stan_stan_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stan_stan_hash());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StanVersion::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StanVersion* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StanVersion>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StanVersion::MergeFrom(const StanVersion& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (from.has_stan_math_hash()) {
      set_has_stan_math_hash();
      stan_math_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stan_math_hash_);
    }
    if (from.has_stan_stan_hash()) {
      set_has_stan_stan_hash();
      stan_stan_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stan_stan_hash_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StanVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StanVersion::CopyFrom(const StanVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StanVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StanVersion::Swap(StanVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StanVersion::InternalSwap(StanVersion* other) {
  version_.Swap(&other->version_);
  stan_math_hash_.Swap(&other->stan_math_hash_);
  stan_stan_hash_.Swap(&other->stan_stan_hash_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StanVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StanVersion_descriptor_;
  metadata.reflection = StanVersion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StanVersion

// required string version = 1;
bool StanVersion::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StanVersion::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void StanVersion::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void StanVersion::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
 const ::std::string& StanVersion::version() const {
  // @@protoc_insertion_point(field_get:StanVersion.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanVersion.version)
}
 void StanVersion::set_version(const char* value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanVersion.version)
}
 void StanVersion::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanVersion.version)
}
 ::std::string* StanVersion::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:StanVersion.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanVersion::release_version() {
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:StanVersion.version)
}

// optional string stan_math_hash = 2;
bool StanVersion::has_stan_math_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StanVersion::set_has_stan_math_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void StanVersion::clear_has_stan_math_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void StanVersion::clear_stan_math_hash() {
  stan_math_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stan_math_hash();
}
 const ::std::string& StanVersion::stan_math_hash() const {
  // @@protoc_insertion_point(field_get:StanVersion.stan_math_hash)
  return stan_math_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_stan_math_hash(const ::std::string& value) {
  set_has_stan_math_hash();
  stan_math_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanVersion.stan_math_hash)
}
 void StanVersion::set_stan_math_hash(const char* value) {
  set_has_stan_math_hash();
  stan_math_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanVersion.stan_math_hash)
}
 void StanVersion::set_stan_math_hash(const char* value, size_t size) {
  set_has_stan_math_hash();
  stan_math_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanVersion.stan_math_hash)
}
 ::std::string* StanVersion::mutable_stan_math_hash() {
  set_has_stan_math_hash();
  // @@protoc_insertion_point(field_mutable:StanVersion.stan_math_hash)
  return stan_math_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanVersion::release_stan_math_hash() {
  clear_has_stan_math_hash();
  return stan_math_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_allocated_stan_math_hash(::std::string* stan_math_hash) {
  if (stan_math_hash != NULL) {
    set_has_stan_math_hash();
  } else {
    clear_has_stan_math_hash();
  }
  stan_math_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stan_math_hash);
  // @@protoc_insertion_point(field_set_allocated:StanVersion.stan_math_hash)
}

// optional string stan_stan_hash = 3;
bool StanVersion::has_stan_stan_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StanVersion::set_has_stan_stan_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void StanVersion::clear_has_stan_stan_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void StanVersion::clear_stan_stan_hash() {
  stan_stan_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stan_stan_hash();
}
 const ::std::string& StanVersion::stan_stan_hash() const {
  // @@protoc_insertion_point(field_get:StanVersion.stan_stan_hash)
  return stan_stan_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_stan_stan_hash(const ::std::string& value) {
  set_has_stan_stan_hash();
  stan_stan_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanVersion.stan_stan_hash)
}
 void StanVersion::set_stan_stan_hash(const char* value) {
  set_has_stan_stan_hash();
  stan_stan_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanVersion.stan_stan_hash)
}
 void StanVersion::set_stan_stan_hash(const char* value, size_t size) {
  set_has_stan_stan_hash();
  stan_stan_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanVersion.stan_stan_hash)
}
 ::std::string* StanVersion::mutable_stan_stan_hash() {
  set_has_stan_stan_hash();
  // @@protoc_insertion_point(field_mutable:StanVersion.stan_stan_hash)
  return stan_stan_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanVersion::release_stan_stan_hash() {
  clear_has_stan_stan_hash();
  return stan_stan_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanVersion::set_allocated_stan_stan_hash(::std::string* stan_stan_hash) {
  if (stan_stan_hash != NULL) {
    set_has_stan_stan_hash();
  } else {
    clear_has_stan_stan_hash();
  }
  stan_stan_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stan_stan_hash);
  // @@protoc_insertion_point(field_set_allocated:StanVersion.stan_stan_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StanCompileRequest::kModelNameFieldNumber;
const int StanCompileRequest::kModelCodeFieldNumber;
const int StanCompileRequest::kModelFileNameFieldNumber;
#endif  // !_MSC_VER

StanCompileRequest::StanCompileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StanCompileRequest)
}

void StanCompileRequest::InitAsDefaultInstance() {
}

StanCompileRequest::StanCompileRequest(const StanCompileRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StanCompileRequest)
}

void StanCompileRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StanCompileRequest::~StanCompileRequest() {
  // @@protoc_insertion_point(destructor:StanCompileRequest)
  SharedDtor();
}

void StanCompileRequest::SharedDtor() {
  model_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StanCompileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StanCompileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanCompileRequest_descriptor_;
}

const StanCompileRequest& StanCompileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fstanc_2eproto();
  return *default_instance_;
}

StanCompileRequest* StanCompileRequest::default_instance_ = NULL;

StanCompileRequest* StanCompileRequest::New(::google::protobuf::Arena* arena) const {
  StanCompileRequest* n = new StanCompileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StanCompileRequest::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_model_name()) {
      model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model_code()) {
      model_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_model_file_name()) {
      model_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StanCompileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StanCompileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_name().data(), this->model_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StanCompileRequest.model_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model_code;
        break;
      }

      // required string model_code = 2;
      case 2: {
        if (tag == 18) {
         parse_model_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_code().data(), this->model_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StanCompileRequest.model_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model_file_name;
        break;
      }

      // optional string model_file_name = 3;
      case 3: {
        if (tag == 26) {
         parse_model_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_file_name().data(), this->model_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StanCompileRequest.model_file_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StanCompileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StanCompileRequest)
  return false;
#undef DO_
}

void StanCompileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StanCompileRequest)
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileRequest.model_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_name(), output);
  }

  // required string model_code = 2;
  if (has_model_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_code().data(), this->model_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileRequest.model_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_code(), output);
  }

  // optional string model_file_name = 3;
  if (has_model_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_file_name().data(), this->model_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileRequest.model_file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model_file_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StanCompileRequest)
}

::google::protobuf::uint8* StanCompileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StanCompileRequest)
  // optional string model_name = 1;
  if (has_model_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_name().data(), this->model_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileRequest.model_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_name(), target);
  }

  // required string model_code = 2;
  if (has_model_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_code().data(), this->model_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileRequest.model_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_code(), target);
  }

  // optional string model_file_name = 3;
  if (has_model_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_file_name().data(), this->model_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileRequest.model_file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model_file_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StanCompileRequest)
  return target;
}

int StanCompileRequest::ByteSize() const {
  int total_size = 0;

  // required string model_code = 2;
  if (has_model_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_code());
  }
  if (_has_bits_[0 / 32] & 5u) {
    // optional string model_name = 1;
    if (has_model_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_name());
    }

    // optional string model_file_name = 3;
    if (has_model_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model_file_name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StanCompileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StanCompileRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StanCompileRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StanCompileRequest::MergeFrom(const StanCompileRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model_name()) {
      set_has_model_name();
      model_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_name_);
    }
    if (from.has_model_code()) {
      set_has_model_code();
      model_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_code_);
    }
    if (from.has_model_file_name()) {
      set_has_model_file_name();
      model_file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_file_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StanCompileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StanCompileRequest::CopyFrom(const StanCompileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StanCompileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void StanCompileRequest::Swap(StanCompileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StanCompileRequest::InternalSwap(StanCompileRequest* other) {
  model_name_.Swap(&other->model_name_);
  model_code_.Swap(&other->model_code_);
  model_file_name_.Swap(&other->model_file_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StanCompileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StanCompileRequest_descriptor_;
  metadata.reflection = StanCompileRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StanCompileRequest

// optional string model_name = 1;
bool StanCompileRequest::has_model_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StanCompileRequest::set_has_model_name() {
  _has_bits_[0] |= 0x00000001u;
}
void StanCompileRequest::clear_has_model_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void StanCompileRequest::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_name();
}
 const ::std::string& StanCompileRequest::model_name() const {
  // @@protoc_insertion_point(field_get:StanCompileRequest.model_name)
  return model_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_model_name(const ::std::string& value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileRequest.model_name)
}
 void StanCompileRequest::set_model_name(const char* value) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileRequest.model_name)
}
 void StanCompileRequest::set_model_name(const char* value, size_t size) {
  set_has_model_name();
  model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileRequest.model_name)
}
 ::std::string* StanCompileRequest::mutable_model_name() {
  set_has_model_name();
  // @@protoc_insertion_point(field_mutable:StanCompileRequest.model_name)
  return model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileRequest::release_model_name() {
  clear_has_model_name();
  return model_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_allocated_model_name(::std::string* model_name) {
  if (model_name != NULL) {
    set_has_model_name();
  } else {
    clear_has_model_name();
  }
  model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:StanCompileRequest.model_name)
}

// required string model_code = 2;
bool StanCompileRequest::has_model_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StanCompileRequest::set_has_model_code() {
  _has_bits_[0] |= 0x00000002u;
}
void StanCompileRequest::clear_has_model_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void StanCompileRequest::clear_model_code() {
  model_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_code();
}
 const ::std::string& StanCompileRequest::model_code() const {
  // @@protoc_insertion_point(field_get:StanCompileRequest.model_code)
  return model_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_model_code(const ::std::string& value) {
  set_has_model_code();
  model_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileRequest.model_code)
}
 void StanCompileRequest::set_model_code(const char* value) {
  set_has_model_code();
  model_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileRequest.model_code)
}
 void StanCompileRequest::set_model_code(const char* value, size_t size) {
  set_has_model_code();
  model_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileRequest.model_code)
}
 ::std::string* StanCompileRequest::mutable_model_code() {
  set_has_model_code();
  // @@protoc_insertion_point(field_mutable:StanCompileRequest.model_code)
  return model_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileRequest::release_model_code() {
  clear_has_model_code();
  return model_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_allocated_model_code(::std::string* model_code) {
  if (model_code != NULL) {
    set_has_model_code();
  } else {
    clear_has_model_code();
  }
  model_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_code);
  // @@protoc_insertion_point(field_set_allocated:StanCompileRequest.model_code)
}

// optional string model_file_name = 3;
bool StanCompileRequest::has_model_file_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StanCompileRequest::set_has_model_file_name() {
  _has_bits_[0] |= 0x00000004u;
}
void StanCompileRequest::clear_has_model_file_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void StanCompileRequest::clear_model_file_name() {
  model_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_file_name();
}
 const ::std::string& StanCompileRequest::model_file_name() const {
  // @@protoc_insertion_point(field_get:StanCompileRequest.model_file_name)
  return model_file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_model_file_name(const ::std::string& value) {
  set_has_model_file_name();
  model_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileRequest.model_file_name)
}
 void StanCompileRequest::set_model_file_name(const char* value) {
  set_has_model_file_name();
  model_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileRequest.model_file_name)
}
 void StanCompileRequest::set_model_file_name(const char* value, size_t size) {
  set_has_model_file_name();
  model_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileRequest.model_file_name)
}
 ::std::string* StanCompileRequest::mutable_model_file_name() {
  set_has_model_file_name();
  // @@protoc_insertion_point(field_mutable:StanCompileRequest.model_file_name)
  return model_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileRequest::release_model_file_name() {
  clear_has_model_file_name();
  return model_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileRequest::set_allocated_model_file_name(::std::string* model_file_name) {
  if (model_file_name != NULL) {
    set_has_model_file_name();
  } else {
    clear_has_model_file_name();
  }
  model_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_file_name);
  // @@protoc_insertion_point(field_set_allocated:StanCompileRequest.model_file_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StanCompileCheck::kHashFieldNumber;
const int StanCompileCheck::kStanVersionFieldNumber;
#endif  // !_MSC_VER

StanCompileCheck::StanCompileCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StanCompileCheck)
}

void StanCompileCheck::InitAsDefaultInstance() {
  stan_version_ = const_cast< ::StanVersion*>(&::StanVersion::default_instance());
}

StanCompileCheck::StanCompileCheck(const StanCompileCheck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StanCompileCheck)
}

void StanCompileCheck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StanCompileCheck::~StanCompileCheck() {
  // @@protoc_insertion_point(destructor:StanCompileCheck)
  SharedDtor();
}

void StanCompileCheck::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stan_version_;
  }
}

void StanCompileCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StanCompileCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanCompileCheck_descriptor_;
}

const StanCompileCheck& StanCompileCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fstanc_2eproto();
  return *default_instance_;
}

StanCompileCheck* StanCompileCheck::default_instance_ = NULL;

StanCompileCheck* StanCompileCheck::New(::google::protobuf::Arena* arena) const {
  StanCompileCheck* n = new StanCompileCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StanCompileCheck::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hash()) {
      hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stan_version()) {
      if (stan_version_ != NULL) stan_version_->::StanVersion::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StanCompileCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StanCompileCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StanCompileCheck.hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stan_version;
        break;
      }

      // optional .StanVersion stan_version = 2;
      case 2: {
        if (tag == 18) {
         parse_stan_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stan_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StanCompileCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StanCompileCheck)
  return false;
#undef DO_
}

void StanCompileCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StanCompileCheck)
  // required string hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileCheck.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash(), output);
  }

  // optional .StanVersion stan_version = 2;
  if (has_stan_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stan_version_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StanCompileCheck)
}

::google::protobuf::uint8* StanCompileCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StanCompileCheck)
  // required string hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileCheck.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }

  // optional .StanVersion stan_version = 2;
  if (has_stan_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->stan_version_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StanCompileCheck)
  return target;
}

int StanCompileCheck::ByteSize() const {
  int total_size = 0;

  // required string hash = 1;
  if (has_hash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }
  // optional .StanVersion stan_version = 2;
  if (has_stan_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stan_version_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StanCompileCheck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StanCompileCheck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StanCompileCheck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StanCompileCheck::MergeFrom(const StanCompileCheck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (from.has_stan_version()) {
      mutable_stan_version()->::StanVersion::MergeFrom(from.stan_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StanCompileCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StanCompileCheck::CopyFrom(const StanCompileCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StanCompileCheck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_stan_version()) {
    if (!this->stan_version_->IsInitialized()) return false;
  }
  return true;
}

void StanCompileCheck::Swap(StanCompileCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StanCompileCheck::InternalSwap(StanCompileCheck* other) {
  hash_.Swap(&other->hash_);
  std::swap(stan_version_, other->stan_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StanCompileCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StanCompileCheck_descriptor_;
  metadata.reflection = StanCompileCheck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StanCompileCheck

// required string hash = 1;
bool StanCompileCheck::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StanCompileCheck::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void StanCompileCheck::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void StanCompileCheck::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
 const ::std::string& StanCompileCheck::hash() const {
  // @@protoc_insertion_point(field_get:StanCompileCheck.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileCheck::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileCheck.hash)
}
 void StanCompileCheck::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileCheck.hash)
}
 void StanCompileCheck::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileCheck.hash)
}
 ::std::string* StanCompileCheck::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:StanCompileCheck.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileCheck::release_hash() {
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileCheck::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:StanCompileCheck.hash)
}

// optional .StanVersion stan_version = 2;
bool StanCompileCheck::has_stan_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StanCompileCheck::set_has_stan_version() {
  _has_bits_[0] |= 0x00000002u;
}
void StanCompileCheck::clear_has_stan_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void StanCompileCheck::clear_stan_version() {
  if (stan_version_ != NULL) stan_version_->::StanVersion::Clear();
  clear_has_stan_version();
}
const ::StanVersion& StanCompileCheck::stan_version() const {
  // @@protoc_insertion_point(field_get:StanCompileCheck.stan_version)
  return stan_version_ != NULL ? *stan_version_ : *default_instance_->stan_version_;
}
::StanVersion* StanCompileCheck::mutable_stan_version() {
  set_has_stan_version();
  if (stan_version_ == NULL) {
    stan_version_ = new ::StanVersion;
  }
  // @@protoc_insertion_point(field_mutable:StanCompileCheck.stan_version)
  return stan_version_;
}
::StanVersion* StanCompileCheck::release_stan_version() {
  clear_has_stan_version();
  ::StanVersion* temp = stan_version_;
  stan_version_ = NULL;
  return temp;
}
void StanCompileCheck::set_allocated_stan_version(::StanVersion* stan_version) {
  delete stan_version_;
  stan_version_ = stan_version;
  if (stan_version) {
    set_has_stan_version();
  } else {
    clear_has_stan_version();
  }
  // @@protoc_insertion_point(field_set_allocated:StanCompileCheck.stan_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* StanCompileResponse_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanCompileResponse_State_descriptor_;
}
bool StanCompileResponse_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const StanCompileResponse_State StanCompileResponse::COMPILE_INCOMPLETE;
const StanCompileResponse_State StanCompileResponse::COMPILE_SUCCESS;
const StanCompileResponse_State StanCompileResponse::COMPILE_WARN;
const StanCompileResponse_State StanCompileResponse::COMPILE_ERROR;
const StanCompileResponse_State StanCompileResponse::State_MIN;
const StanCompileResponse_State StanCompileResponse::State_MAX;
const int StanCompileResponse::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int StanCompileResponse::kHashFieldNumber;
const int StanCompileResponse::kStateFieldNumber;
const int StanCompileResponse::kCppCodeFieldNumber;
const int StanCompileResponse::kMessagesFieldNumber;
const int StanCompileResponse::kStanVersionFieldNumber;
#endif  // !_MSC_VER

StanCompileResponse::StanCompileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StanCompileResponse)
}

void StanCompileResponse::InitAsDefaultInstance() {
  stan_version_ = const_cast< ::StanVersion*>(&::StanVersion::default_instance());
}

StanCompileResponse::StanCompileResponse(const StanCompileResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StanCompileResponse)
}

void StanCompileResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  cpp_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messages_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stan_version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StanCompileResponse::~StanCompileResponse() {
  // @@protoc_insertion_point(destructor:StanCompileResponse)
  SharedDtor();
}

void StanCompileResponse::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cpp_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messages_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stan_version_;
  }
}

void StanCompileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StanCompileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StanCompileResponse_descriptor_;
}

const StanCompileResponse& StanCompileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fstanc_2eproto();
  return *default_instance_;
}

StanCompileResponse* StanCompileResponse::default_instance_ = NULL;

StanCompileResponse* StanCompileResponse::New(::google::protobuf::Arena* arena) const {
  StanCompileResponse* n = new StanCompileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StanCompileResponse::Clear() {
  if (_has_bits_[0 / 32] & 31u) {
    if (has_hash()) {
      hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    state_ = 0;
    if (has_cpp_code()) {
      cpp_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_messages()) {
      messages_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stan_version()) {
      if (stan_version_ != NULL) stan_version_->::StanVersion::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StanCompileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StanCompileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StanCompileResponse.hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .StanCompileResponse.State state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::StanCompileResponse_State_IsValid(value)) {
            set_state(static_cast< ::StanCompileResponse_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cpp_code;
        break;
      }

      // optional string cpp_code = 3;
      case 3: {
        if (tag == 26) {
         parse_cpp_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpp_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cpp_code().data(), this->cpp_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StanCompileResponse.cpp_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_messages;
        break;
      }

      // optional string messages = 4;
      case 4: {
        if (tag == 34) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messages()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messages().data(), this->messages().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StanCompileResponse.messages");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stan_version;
        break;
      }

      // required .StanVersion stan_version = 5;
      case 5: {
        if (tag == 42) {
         parse_stan_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stan_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StanCompileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StanCompileResponse)
  return false;
#undef DO_
}

void StanCompileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StanCompileResponse)
  // required string hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileResponse.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hash(), output);
  }

  // required .StanCompileResponse.State state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional string cpp_code = 3;
  if (has_cpp_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpp_code().data(), this->cpp_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileResponse.cpp_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cpp_code(), output);
  }

  // optional string messages = 4;
  if (has_messages()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messages().data(), this->messages().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileResponse.messages");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->messages(), output);
  }

  // required .StanVersion stan_version = 5;
  if (has_stan_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stan_version_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StanCompileResponse)
}

::google::protobuf::uint8* StanCompileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StanCompileResponse)
  // required string hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileResponse.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hash(), target);
  }

  // required .StanCompileResponse.State state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional string cpp_code = 3;
  if (has_cpp_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpp_code().data(), this->cpp_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileResponse.cpp_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cpp_code(), target);
  }

  // optional string messages = 4;
  if (has_messages()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messages().data(), this->messages().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StanCompileResponse.messages");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->messages(), target);
  }

  // required .StanVersion stan_version = 5;
  if (has_stan_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, *this->stan_version_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StanCompileResponse)
  return target;
}

int StanCompileResponse::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_hash()) {
    // required string hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  if (has_state()) {
    // required .StanCompileResponse.State state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  if (has_stan_version()) {
    // required .StanVersion stan_version = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stan_version_);
  }

  return total_size;
}
int StanCompileResponse::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required string hash = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());

    // required .StanCompileResponse.State state = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());

    // required .StanVersion stan_version = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stan_version_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional string cpp_code = 3;
    if (has_cpp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpp_code());
    }

    // optional string messages = 4;
    if (has_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messages());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StanCompileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StanCompileResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StanCompileResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StanCompileResponse::MergeFrom(const StanCompileResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cpp_code()) {
      set_has_cpp_code();
      cpp_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cpp_code_);
    }
    if (from.has_messages()) {
      set_has_messages();
      messages_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messages_);
    }
    if (from.has_stan_version()) {
      mutable_stan_version()->::StanVersion::MergeFrom(from.stan_version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StanCompileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StanCompileResponse::CopyFrom(const StanCompileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StanCompileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_stan_version()) {
    if (!this->stan_version_->IsInitialized()) return false;
  }
  return true;
}

void StanCompileResponse::Swap(StanCompileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StanCompileResponse::InternalSwap(StanCompileResponse* other) {
  hash_.Swap(&other->hash_);
  std::swap(state_, other->state_);
  cpp_code_.Swap(&other->cpp_code_);
  messages_.Swap(&other->messages_);
  std::swap(stan_version_, other->stan_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StanCompileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StanCompileResponse_descriptor_;
  metadata.reflection = StanCompileResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StanCompileResponse

// required string hash = 1;
bool StanCompileResponse::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StanCompileResponse::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void StanCompileResponse::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void StanCompileResponse::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
 const ::std::string& StanCompileResponse::hash() const {
  // @@protoc_insertion_point(field_get:StanCompileResponse.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileResponse::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileResponse.hash)
}
 void StanCompileResponse::set_hash(const char* value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileResponse.hash)
}
 void StanCompileResponse::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileResponse.hash)
}
 ::std::string* StanCompileResponse::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:StanCompileResponse.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileResponse::release_hash() {
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileResponse::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:StanCompileResponse.hash)
}

// required .StanCompileResponse.State state = 2;
bool StanCompileResponse::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StanCompileResponse::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void StanCompileResponse::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void StanCompileResponse::clear_state() {
  state_ = 0;
  clear_has_state();
}
 ::StanCompileResponse_State StanCompileResponse::state() const {
  // @@protoc_insertion_point(field_get:StanCompileResponse.state)
  return static_cast< ::StanCompileResponse_State >(state_);
}
 void StanCompileResponse::set_state(::StanCompileResponse_State value) {
  assert(::StanCompileResponse_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:StanCompileResponse.state)
}

// optional string cpp_code = 3;
bool StanCompileResponse::has_cpp_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StanCompileResponse::set_has_cpp_code() {
  _has_bits_[0] |= 0x00000004u;
}
void StanCompileResponse::clear_has_cpp_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void StanCompileResponse::clear_cpp_code() {
  cpp_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cpp_code();
}
 const ::std::string& StanCompileResponse::cpp_code() const {
  // @@protoc_insertion_point(field_get:StanCompileResponse.cpp_code)
  return cpp_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileResponse::set_cpp_code(const ::std::string& value) {
  set_has_cpp_code();
  cpp_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileResponse.cpp_code)
}
 void StanCompileResponse::set_cpp_code(const char* value) {
  set_has_cpp_code();
  cpp_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileResponse.cpp_code)
}
 void StanCompileResponse::set_cpp_code(const char* value, size_t size) {
  set_has_cpp_code();
  cpp_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileResponse.cpp_code)
}
 ::std::string* StanCompileResponse::mutable_cpp_code() {
  set_has_cpp_code();
  // @@protoc_insertion_point(field_mutable:StanCompileResponse.cpp_code)
  return cpp_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileResponse::release_cpp_code() {
  clear_has_cpp_code();
  return cpp_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileResponse::set_allocated_cpp_code(::std::string* cpp_code) {
  if (cpp_code != NULL) {
    set_has_cpp_code();
  } else {
    clear_has_cpp_code();
  }
  cpp_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpp_code);
  // @@protoc_insertion_point(field_set_allocated:StanCompileResponse.cpp_code)
}

// optional string messages = 4;
bool StanCompileResponse::has_messages() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StanCompileResponse::set_has_messages() {
  _has_bits_[0] |= 0x00000008u;
}
void StanCompileResponse::clear_has_messages() {
  _has_bits_[0] &= ~0x00000008u;
}
void StanCompileResponse::clear_messages() {
  messages_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messages();
}
 const ::std::string& StanCompileResponse::messages() const {
  // @@protoc_insertion_point(field_get:StanCompileResponse.messages)
  return messages_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileResponse::set_messages(const ::std::string& value) {
  set_has_messages();
  messages_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StanCompileResponse.messages)
}
 void StanCompileResponse::set_messages(const char* value) {
  set_has_messages();
  messages_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StanCompileResponse.messages)
}
 void StanCompileResponse::set_messages(const char* value, size_t size) {
  set_has_messages();
  messages_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StanCompileResponse.messages)
}
 ::std::string* StanCompileResponse::mutable_messages() {
  set_has_messages();
  // @@protoc_insertion_point(field_mutable:StanCompileResponse.messages)
  return messages_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StanCompileResponse::release_messages() {
  clear_has_messages();
  return messages_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StanCompileResponse::set_allocated_messages(::std::string* messages) {
  if (messages != NULL) {
    set_has_messages();
  } else {
    clear_has_messages();
  }
  messages_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messages);
  // @@protoc_insertion_point(field_set_allocated:StanCompileResponse.messages)
}

// required .StanVersion stan_version = 5;
bool StanCompileResponse::has_stan_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StanCompileResponse::set_has_stan_version() {
  _has_bits_[0] |= 0x00000010u;
}
void StanCompileResponse::clear_has_stan_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void StanCompileResponse::clear_stan_version() {
  if (stan_version_ != NULL) stan_version_->::StanVersion::Clear();
  clear_has_stan_version();
}
const ::StanVersion& StanCompileResponse::stan_version() const {
  // @@protoc_insertion_point(field_get:StanCompileResponse.stan_version)
  return stan_version_ != NULL ? *stan_version_ : *default_instance_->stan_version_;
}
::StanVersion* StanCompileResponse::mutable_stan_version() {
  set_has_stan_version();
  if (stan_version_ == NULL) {
    stan_version_ = new ::StanVersion;
  }
  // @@protoc_insertion_point(field_mutable:StanCompileResponse.stan_version)
  return stan_version_;
}
::StanVersion* StanCompileResponse::release_stan_version() {
  clear_has_stan_version();
  ::StanVersion* temp = stan_version_;
  stan_version_ = NULL;
  return temp;
}
void StanCompileResponse::set_allocated_stan_version(::StanVersion* stan_version) {
  delete stan_version_;
  stan_version_ = stan_version;
  if (stan_version) {
    set_has_stan_version();
  } else {
    clear_has_stan_version();
  }
  // @@protoc_insertion_point(field_set_allocated:StanCompileResponse.stan_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
